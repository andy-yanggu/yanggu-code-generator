/*
 Navicat Premium Dump SQL

 Source Server         : localhost-3306
 Source Server Type    : MySQL
 Source Server Version : 80405 (8.4.5)
 Source Host           : localhost:3306
 Source Schema         : code_generator

 Target Server Type    : MySQL
 Target Server Version : 80405 (8.4.5)
 File Encoding         : 65001

 Date: 07/07/2025 14:42:57
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for gen_base_class
-- ----------------------------
DROP TABLE IF EXISTS `gen_base_class`;
CREATE TABLE `gen_base_class`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `package_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '基类包名',
  `class_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '基类类名',
  `fields` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '基类字段，多个用英文逗号分隔',
  `remark` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '基类' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_base_class
-- ----------------------------
INSERT INTO `gen_base_class` VALUES (1, 'com.yanggu.code.generator.common.domain.entity', 'BaseEntity', 'createTime,updateTime,isDelete', '包含创建时间、修改时间、删除字段', '2025-03-14 09:45:29', '2025-07-07 10:22:50', 0);
INSERT INTO `gen_base_class` VALUES (4, 'com.yanggu.demo.test.common.domain.entity', 'BaseUserEntity', 'createTime,updateTime,isDelete,createUserId,updateUserId', '包含创建时间、修改时间、删除字段、创建人和修改人', '2025-05-06 18:05:55', '2025-06-16 16:51:47', 0);
INSERT INTO `gen_base_class` VALUES (6, 'com.yanggu.demo.test.common.domain.vo', 'BaseVO', 'isDelete,createTime,updateTime', '', '2025-06-10 14:52:46', '2025-07-04 13:37:30', 0);
INSERT INTO `gen_base_class` VALUES (7, '1', '1', '1', '', '2025-07-04 13:49:17', '2025-07-04 13:49:38', 1);
INSERT INTO `gen_base_class` VALUES (8, '12', '1', '1', '1', '2025-07-04 13:49:32', '2025-07-04 13:49:50', 1);
INSERT INTO `gen_base_class` VALUES (9, '1', '22', '1', '1', '2025-07-04 13:49:45', '2025-07-04 13:49:50', 1);

-- ----------------------------
-- Table structure for gen_datasource
-- ----------------------------
DROP TABLE IF EXISTS `gen_datasource`;
CREATE TABLE `gen_datasource`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `db_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '数据库类型',
  `conn_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '连接名称',
  `conn_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'URL',
  `username` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `password` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '密码',
  `datasource_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '数据源' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_datasource
-- ----------------------------
INSERT INTO `gen_datasource` VALUES (7, 'MySQL', 'dev', 'jdbc:mysql://localhost:3306/code_generator?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true', 'root', 'dklsr4fg#5wRcGDU', '开发环境', '2025-05-12 11:23:20', '2025-07-07 10:38:52', 0);
INSERT INTO `gen_datasource` VALUES (10, 'MySQL', '1', '1', '1', '1', '1', '2025-07-04 13:50:20', '2025-07-04 13:50:30', 1);

-- ----------------------------
-- Table structure for gen_enum
-- ----------------------------
DROP TABLE IF EXISTS `gen_enum`;
CREATE TABLE `gen_enum`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `enum_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '枚举名称',
  `enum_desc` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '枚举描述',
  `project_id` bigint NULL DEFAULT NULL COMMENT '项目ID',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '枚举' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_enum
-- ----------------------------
INSERT INTO `gen_enum` VALUES (1, 'template-group-type', '模板组类型', 14, '2025-05-19 14:21:57', '2025-05-19 17:35:43', 0);
INSERT INTO `gen_enum` VALUES (3, 'template-type', '模板类型', 19, '2025-05-20 10:41:06', '2025-07-04 13:46:39', 0);
INSERT INTO `gen_enum` VALUES (4, 'file-write-type', '文件写入方式', 16, '2025-05-20 11:06:10', '2025-05-20 11:06:10', 0);
INSERT INTO `gen_enum` VALUES (6, '11', '11', 14, '2025-07-04 14:38:11', '2025-07-04 14:44:28', 1);

-- ----------------------------
-- Table structure for gen_enum_item
-- ----------------------------
DROP TABLE IF EXISTS `gen_enum_item`;
CREATE TABLE `gen_enum_item`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `enum_id` bigint NULL DEFAULT NULL COMMENT '枚举ID',
  `enum_item_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '枚举项名称',
  `enum_item_code` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '枚举项编码',
  `enum_item_desc` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '枚举项描述',
  `enum_item_order` int NULL DEFAULT 0 COMMENT '枚举项排序',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '枚举项' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_enum_item
-- ----------------------------
INSERT INTO `gen_enum_item` VALUES (1, 1, 'PROJECT', '0', '项目模板', 0, '2025-05-19 14:59:48', '2025-05-19 15:09:03', 0);
INSERT INTO `gen_enum_item` VALUES (3, 1, 'TABLE', '1', '表模板', 1, '2025-05-19 15:03:02', '2025-06-18 14:45:08', 0);
INSERT INTO `gen_enum_item` VALUES (4, 3, 'file', '0', '文件', 0, '2025-05-20 10:41:22', '2025-05-20 10:51:22', 0);
INSERT INTO `gen_enum_item` VALUES (6, 3, 'directory', '1', '目录', 1, '2025-05-20 10:52:03', '2025-06-19 09:53:41', 0);
INSERT INTO `gen_enum_item` VALUES (7, 4, 'override', '0', '覆盖', 0, '2025-05-20 11:07:35', '2025-05-20 11:07:35', 0);
INSERT INTO `gen_enum_item` VALUES (8, 4, 'append', '1', '追加', 0, '2025-05-20 11:07:50', '2025-05-20 11:07:50', 0);
INSERT INTO `gen_enum_item` VALUES (9, 5, 'override', '0', '覆盖', 0, '2025-05-20 11:15:45', '2025-05-20 11:15:45', 0);
INSERT INTO `gen_enum_item` VALUES (10, 5, 'append', '1', '追加', 0, '2025-05-20 11:15:57', '2025-05-20 11:15:57', 0);
INSERT INTO `gen_enum_item` VALUES (11, 1, 'ENUM', '2', '枚举模板', 2, '2025-06-18 14:28:11', '2025-06-18 14:45:01', 0);

-- ----------------------------
-- Table structure for gen_field_type
-- ----------------------------
DROP TABLE IF EXISTS `gen_field_type`;
CREATE TABLE `gen_field_type`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `column_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字段类型',
  `attr_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性类型',
  `package_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性包名',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 44 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '字段类型' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_field_type
-- ----------------------------
INSERT INTO `gen_field_type` VALUES (1, 'datetime', 'Date', 'java.util.Date', '2025-03-14 09:45:29', '2025-05-16 15:28:05', 0);
INSERT INTO `gen_field_type` VALUES (2, 'date', 'Date', 'java.util.Date', '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (3, 'tinyint', 'Integer', '', '2025-03-14 09:45:29', '2025-07-01 15:51:43', 0);
INSERT INTO `gen_field_type` VALUES (4, 'smallint', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (5, 'mediumint', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (6, 'int', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (7, 'integer', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (8, 'bigint', 'Long', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (9, 'float', 'Float', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (10, 'double', 'Double', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:05', 0);
INSERT INTO `gen_field_type` VALUES (11, 'decimal', 'BigDecimal', 'java.math.BigDecimal', '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (12, 'bit', 'Boolean', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (13, 'char', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (14, 'varchar', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (15, 'tinytext', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (16, 'text', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (17, 'mediumtext', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (18, 'longtext', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (19, 'timestamp', 'Date', 'java.util.Date', '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (20, 'NUMBER', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (21, 'BINARY_INTEGER', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (22, 'BINARY_FLOAT', 'Float', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (23, 'BINARY_DOUBLE', 'Double', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (24, 'VARCHAR2', 'String', NULL, '2025-03-14 09:45:29', '2025-07-01 16:25:31', 0);
INSERT INTO `gen_field_type` VALUES (25, 'NVARCHAR', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (26, 'NVARCHAR2', 'String', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (27, 'CLOB', 'String', NULL, '2025-03-14 09:45:29', '2025-06-16 13:55:15', 0);
INSERT INTO `gen_field_type` VALUES (28, 'int8', 'Long', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (29, 'int4', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (30, 'int2', 'Integer', NULL, '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (31, 'numeric', 'BigDecimal', 'java.math.BigDecimal', '2025-03-14 09:45:29', '2025-05-12 13:38:06', 0);
INSERT INTO `gen_field_type` VALUES (43, '1', 'Byte', '1', '2025-07-04 13:47:07', '2025-07-04 13:47:53', 1);

-- ----------------------------
-- Table structure for gen_project
-- ----------------------------
DROP TABLE IF EXISTS `gen_project`;
CREATE TABLE `gen_project`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `project_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目名称',
  `project_package` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目包名',
  `project_version` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目版本',
  `datasource_id` bigint NULL DEFAULT NULL COMMENT '数据源ID',
  `project_template_group_id` bigint NULL DEFAULT NULL COMMENT '项目模板组ID',
  `table_template_group_id` bigint NULL DEFAULT NULL COMMENT '表模板组ID',
  `enum_template_group_id` bigint NULL DEFAULT NULL COMMENT '枚举模板组ID',
  `backend_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '后端路径',
  `frontend_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '前端路径',
  `project_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '项目描述',
  `author` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `entity_base_class_id` bigint NULL DEFAULT NULL COMMENT 'Entity基类ID',
  `vo_base_class_id` bigint NULL DEFAULT NULL COMMENT 'VO基类ID',
  `generator_type` tinyint NULL DEFAULT NULL COMMENT '生成方式（0-zip压缩包，1-服务器本地）',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 22 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '项目' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_project
-- ----------------------------
INSERT INTO `gen_project` VALUES (14, 'demo-test', 'com.yanggu', '1.0.0', 7, 29, 1, 31, 'E:/test/project/demo-test', '', '测试描述', '', 4, 6, 0, '2025-05-15 09:44:49', '2025-07-04 15:24:26', 0);
INSERT INTO `gen_project` VALUES (16, 'code-generator', 'com.yanggu', '1.0-SNAPSHOT', 7, 29, 1, 31, 'E:/project/idea_project/self/yanggu-code-generator/yanggu-code-generator-backend', '', '', '', 1, NULL, 1, '2025-05-19 10:33:19', '2025-05-20 11:08:26', 0);
INSERT INTO `gen_project` VALUES (19, 'code-generator-frontend', 'com.yanggu', '1.0.0', 7, 30, 28, 32, '', '', '', '', 1, NULL, 1, '2025-05-19 11:05:41', '2025-06-09 14:20:16', 0);
INSERT INTO `gen_project` VALUES (20, 'test-project', 'com.test.project', '1.0.0', 7, 29, 1, 31, '', '', '1', '1', 1, 1, 1, '2025-07-04 15:26:45', '2025-07-04 15:36:03', 1);
INSERT INTO `gen_project` VALUES (21, 'ddadas', '111', '111', 7, 29, 1, 31, '', '', '111', '11', 1, 1, 0, '2025-07-04 15:41:44', '2025-07-04 15:41:58', 1);

-- ----------------------------
-- Table structure for gen_table
-- ----------------------------
DROP TABLE IF EXISTS `gen_table`;
CREATE TABLE `gen_table`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `table_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '表名',
  `database_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '数据库名',
  `class_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '类名',
  `table_comment` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '注释',
  `project_id` bigint NULL DEFAULT NULL COMMENT '项目ID',
  `author` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `version` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '版本',
  `function_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '功能名',
  `form_layout` tinyint NULL DEFAULT NULL COMMENT '表单布局  1：一列   2：两列',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 196 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_table
-- ----------------------------
INSERT INTO `gen_table` VALUES (111, 'gen_field_type', 'yanggu_code_generator', 'GenFieldType', '字段类型管理', 14, '', '1', 'genFieldType', 1, '2025-05-15 09:44:49', '2025-05-15 09:44:49', 0);
INSERT INTO `gen_table` VALUES (112, 'gen_project', 'yanggu_code_generator', 'GenProject', '项目', 14, '', '1', 'genProject', 1, '2025-05-15 09:44:49', '2025-05-15 09:44:49', 0);
INSERT INTO `gen_table` VALUES (113, 'gen_table', 'yanggu_code_generator', 'GenTable', '代码生成表', 14, '', '1', 'genTable', 1, '2025-05-15 09:44:49', '2025-05-15 09:44:49', 0);
INSERT INTO `gen_table` VALUES (114, 'gen_table_field', 'yanggu_code_generator', 'GenTableField', '代码生成表字段', 14, '', '1', 'genTableField', 1, '2025-05-15 09:44:49', '2025-05-15 09:44:49', 0);
INSERT INTO `gen_table` VALUES (115, 'gen_template', 'yanggu_code_generator', 'GenTemplate', '模板管理', 14, '', '1', 'genTemplate', 1, '2025-05-15 09:44:49', '2025-05-15 09:44:49', 0);
INSERT INTO `gen_table` VALUES (116, 'gen_template_group', 'yanggu_code_generator', 'GenTemplateGroup', '模板组管理', 14, '', '1', 'genTemplateGroup', 1, '2025-05-15 09:44:49', '2025-05-15 09:44:49', 0);
INSERT INTO `gen_table` VALUES (125, 'gen_base_class', 'yanggu_code_generator', 'GenBaseClass', '基类管理', 16, '', '1.0-SNAPSHOT', 'genBaseClass', 1, '2025-05-19 10:33:19', '2025-05-19 10:33:19', 0);
INSERT INTO `gen_table` VALUES (126, 'gen_datasource', 'yanggu_code_generator', 'GenDatasource', '数据源管理', 16, '', '1.0-SNAPSHOT', 'genDatasource', 1, '2025-05-19 10:33:19', '2025-05-19 10:33:19', 0);
INSERT INTO `gen_table` VALUES (127, 'gen_enum', 'yanggu_code_generator', 'Enum', '枚举', 16, '', '1.0-SNAPSHOT', 'enum', 1, '2025-05-19 10:33:19', '2025-05-19 10:43:50', 0);
INSERT INTO `gen_table` VALUES (128, 'gen_enum_item', 'yanggu_code_generator', 'EnumItem', '枚举项', 16, '', '1.0-SNAPSHOT', 'enumItem', 1, '2025-05-19 10:33:20', '2025-05-19 10:44:52', 0);
INSERT INTO `gen_table` VALUES (129, 'gen_field_type', 'yanggu_code_generator', 'GenFieldType', '字段类型管理', 16, '', '1.0-SNAPSHOT', 'genFieldType', 1, '2025-05-19 10:33:20', '2025-05-19 10:33:20', 0);
INSERT INTO `gen_table` VALUES (130, 'gen_project', 'yanggu_code_generator', 'GenProject', '项目', 16, '', '1.0-SNAPSHOT', 'genProject', 1, '2025-05-19 10:33:20', '2025-05-19 10:33:20', 0);
INSERT INTO `gen_table` VALUES (131, 'gen_table', 'yanggu_code_generator', 'GenTable', '代码生成表', 16, '', '1.0-SNAPSHOT', 'genTable', 1, '2025-05-19 10:33:20', '2025-05-19 10:33:20', 0);
INSERT INTO `gen_table` VALUES (132, 'gen_table_field', 'yanggu_code_generator', 'GenTableField', '代码生成表字段', 16, '', '1.0-SNAPSHOT', 'genTableField', 1, '2025-05-19 10:33:20', '2025-05-19 10:33:20', 0);
INSERT INTO `gen_table` VALUES (133, 'gen_template', 'yanggu_code_generator', 'GenTemplate', '模板管理', 16, '', '1.0-SNAPSHOT', 'genTemplate', 1, '2025-05-19 10:33:20', '2025-05-19 10:33:20', 0);
INSERT INTO `gen_table` VALUES (134, 'gen_template_group', 'yanggu_code_generator', 'GenTemplateGroup', '模板组管理', 16, '', '1.0-SNAPSHOT', 'genTemplateGroup', 1, '2025-05-19 10:33:20', '2025-05-19 10:33:20', 0);
INSERT INTO `gen_table` VALUES (155, 'gen_base_class', 'yanggu_code_generator', 'GenBaseClass', '基类管理', 19, '', '1.0.0', 'genBaseClass', 1, '2025-05-19 11:05:41', '2025-05-19 11:05:41', 0);
INSERT INTO `gen_table` VALUES (156, 'gen_datasource', 'yanggu_code_generator', 'GenDatasource', '数据源管理', 19, '', '1.0.0', 'genDatasource', 1, '2025-05-19 11:05:41', '2025-05-19 11:05:41', 0);
INSERT INTO `gen_table` VALUES (157, 'gen_enum', 'yanggu_code_generator', 'Enum', '枚举', 19, '', '1.0.0', 'enum', 1, '2025-05-19 11:05:41', '2025-05-19 11:07:38', 0);
INSERT INTO `gen_table` VALUES (161, 'gen_table', 'yanggu_code_generator', 'GenTable', '代码生成表', 19, '', '1.0.0', 'genTable', 1, '2025-05-19 11:05:41', '2025-05-19 11:05:41', 0);
INSERT INTO `gen_table` VALUES (162, 'gen_table_field', 'yanggu_code_generator', 'GenTableField', '代码生成表字段', 19, '', '1.0.0', 'genTableField', 1, '2025-05-19 11:05:41', '2025-05-19 11:05:41', 0);
INSERT INTO `gen_table` VALUES (163, 'gen_template', 'yanggu_code_generator', 'GenTemplate', '模板管理', 19, '', '1.0.0', 'genTemplate', 1, '2025-05-19 11:05:41', '2025-05-19 11:05:41', 0);
INSERT INTO `gen_table` VALUES (164, 'gen_template_group', 'yanggu_code_generator', 'GenTemplateGroup', '模板组管理', 19, '', '1.0.0', 'genTemplateGroup', 1, '2025-05-19 11:05:41', '2025-05-19 11:05:41', 0);
INSERT INTO `gen_table` VALUES (165, 'gen_enum', 'yanggu_code_generator', 'GenEnum', '枚举', 14, '', '1.0.0', 'genEnum', 1, '2025-05-29 13:51:32', '2025-07-04 14:48:33', 0);
INSERT INTO `gen_table` VALUES (168, 'gen_datasource', 'yanggu_code_generator', 'GenDatasource', '数据源管理', 14, '', '1.0.0', 'genDatasource', 1, '2025-06-03 16:47:00', '2025-06-03 16:47:00', 0);
INSERT INTO `gen_table` VALUES (169, 'gen_base_class', 'yanggu_code_generator', 'GenBaseClass', '基类管理', 14, '', '1.0.0', 'genBaseClass', 1, '2025-06-05 15:05:54', '2025-06-06 14:28:53', 0);
INSERT INTO `gen_table` VALUES (171, 'gen_enum_item', 'yanggu_code_generator', 'GenEnumItem', '枚举项', 19, '', '1.0.0', 'genEnumItem', 1, '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table` VALUES (172, 'gen_field_type', 'yanggu_code_generator', 'GenFieldType', '字段类型管理', 19, '', '1.0.0', 'genFieldType', 1, '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table` VALUES (173, 'gen_project', 'yanggu_code_generator', 'GenProject', '项目', 19, '', '1.0.0', 'genProject', 1, '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table` VALUES (174, 'gen_base_class', 'code_generator', 'GenBaseClass', '基类', 20, '1', '1.0.0', 'genBaseClass', 1, '2025-07-04 15:26:45', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (175, 'gen_datasource', 'code_generator', 'GenDatasource', '数据源', 20, '1', '1.0.0', 'genDatasource', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (176, 'gen_enum', 'code_generator', 'GenEnum', '枚举', 20, '1', '1.0.0', 'genEnum', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (177, 'gen_enum_item', 'code_generator', 'GenEnumItem', '枚举项', 20, '1', '1.0.0', 'genEnumItem', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (178, 'gen_field_type', 'code_generator', 'GenFieldType', '字段类型', 20, '1', '1.0.0', 'genFieldType', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (179, 'gen_project', 'code_generator', 'GenProject', '项目', 20, '1', '1.0.0', 'genProject', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (180, 'gen_table', 'code_generator', 'GenTable', '表', 20, '1', '1.0.0', 'genTable', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (181, 'gen_table_field', 'code_generator', 'GenTableField', '表字段', 20, '1', '1.0.0', 'genTableField', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (182, 'gen_template', 'code_generator', 'GenTemplate', '模板', 20, '1', '1.0.0', 'genTemplate', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (183, 'gen_template_group', 'code_generator', 'GenTemplateGroup', '模板组', 20, '1', '1.0.0', 'genTemplateGroup', 1, '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table` VALUES (184, 'gen_base_class', 'code_generator', 'GenBaseClass', '基类', 21, '11', '111', 'genBaseClass', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (185, 'gen_datasource', 'code_generator', 'GenDatasource', '数据源', 21, '11', '111', 'genDatasource', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (186, 'gen_enum', 'code_generator', 'GenEnum', '枚举', 21, '11', '111', 'genEnum', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (187, 'gen_enum_item', 'code_generator', 'GenEnumItem', '枚举项', 21, '11', '111', 'genEnumItem', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (188, 'gen_field_type', 'code_generator', 'GenFieldType', '字段类型', 21, '11', '111', 'genFieldType', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (189, 'gen_project', 'code_generator', 'GenProject', '项目', 21, '11', '111', 'genProject', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (190, 'gen_table', 'code_generator', 'GenTable', '表', 21, '11', '111', 'genTable', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (191, 'gen_table_field', 'code_generator', 'GenTableField', '表字段', 21, '11', '111', 'genTableField', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (192, 'gen_template', 'code_generator', 'GenTemplate', '模板', 21, '11', '111', 'genTemplate', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (193, 'gen_template_group', 'code_generator', 'GenTemplateGroup', '模板组', 21, '11', '111', 'genTemplateGroup', 1, '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table` VALUES (194, 'gen_enum_item', 'code_generator', 'GenEnumItem', '枚举项', 14, '', '1.0.0', 'genEnumItem', 1, '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table` VALUES (195, 'gen_enum_item', 'code_generator', 'GenEnumItem', '枚举项', 14, '', '1.0.0', 'genEnumItem', 1, '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);

-- ----------------------------
-- Table structure for gen_table_field
-- ----------------------------
DROP TABLE IF EXISTS `gen_table_field`;
CREATE TABLE `gen_table_field`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `table_id` bigint NULL DEFAULT NULL COMMENT '表ID',
  `field_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字段名称',
  `field_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字段类型',
  `field_comment` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字段说明',
  `attr_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性名称',
  `attr_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性类型',
  `package_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性包名',
  `field_sort` int NULL DEFAULT 0 COMMENT '字段顺序',
  `auto_fill` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'DEFAULT' COMMENT '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE',
  `primary_pk` tinyint NULL DEFAULT 0 COMMENT '主键 0：否  1：是',
  `logic_delete` tinyint NULL DEFAULT 0 COMMENT '逻辑删除 0：否  1：是',
  `logic_delete_value` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '逻辑删除值',
  `logic_not_delete_value` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '逻辑未删除值',
  `enum_id` bigint NULL DEFAULT NULL COMMENT '枚举ID',
  `unique_field` tinyint NULL DEFAULT 0 COMMENT '唯一字段 0：否 1：是',
  `form_item` tinyint NULL DEFAULT 0 COMMENT '表单项 0：否  1：是',
  `form_required` tinyint NULL DEFAULT 0 COMMENT '表单必填 0：否  1：是',
  `form_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '表单类型',
  `form_field_sort` int NULL DEFAULT 0 COMMENT '表单字段顺序',
  `form_validator` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '表单效验',
  `grid_item` tinyint NULL DEFAULT 0 COMMENT '列表项 0：否  1：是',
  `grid_sort` tinyint NULL DEFAULT 0 COMMENT '列表排序 0：否  1：是',
  `grid_field_sort` int UNSIGNED NULL DEFAULT 0 COMMENT '列表字段顺序',
  `query_item` tinyint NULL DEFAULT 0 COMMENT '查询项 0：否  1：是',
  `query_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '查询方式',
  `query_field_sort` int NULL DEFAULT NULL COMMENT '查询字段顺序',
  `query_form_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '查询表单类型',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2347 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '表字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_table_field
-- ----------------------------
INSERT INTO `gen_table_field` VALUES (681, 58, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', 0, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (682, 58, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', 0, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (683, 58, 'code', 'varchar', '基类编码', 'code', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', 0, NULL, 1, NULL, NULL, 1, '>', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (684, 58, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', 0, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (685, 58, 'remark', 'varchar', '备注21', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', 0, NULL, 0, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (686, 58, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 0, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (687, 58, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 0, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (688, 58, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 0, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (689, 59, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (690, 59, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (691, 59, 'conn_name', 'varchar', '连接名', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (692, 59, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (693, 59, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (694, 59, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (695, 59, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (696, 59, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (697, 59, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (698, 59, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (699, 60, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (700, 60, 'column_type', 'varchar', '字段类型', 'columnType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (701, 60, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (702, 60, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (703, 60, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (704, 60, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (705, 60, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (706, 61, 'id', 'bigint', 'ID主键自增', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (707, 61, 'project_name', 'varchar', '项目名称', 'projectName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (708, 61, 'project_package', 'varchar', '项目包名', 'projectPackage', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (709, 61, 'project_version', 'varchar', '项目版本', 'projectVersion', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (710, 61, 'datasource_id', 'bigint', '数据源ID', 'datasourceId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (711, 61, 'project_template_group_id', 'bigint', '项目模板组ID', 'projectTemplateGroupId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (712, 61, 'table_template_group_id', 'bigint', '表模板组ID', 'tableTemplateGroupId', 'Long', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (713, 61, 'backend_path', 'varchar', '后端路径', 'backendPath', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (714, 61, 'frontend_path', 'varchar', '前端路径', 'frontendPath', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (715, 61, 'project_desc', 'varchar', '项目描述', 'projectDesc', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (716, 61, 'author', 'varchar', '作者', 'author', 'String', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (717, 61, 'base_class_id', 'bigint', '基类ID', 'baseClassId', 'Long', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (718, 61, 'generator_type', 'tinyint', '生成方式（0-zip压缩包，1-服务器本地）', 'generatorType', 'Integer', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (719, 61, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (720, 61, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (721, 61, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 15, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (722, 62, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (723, 62, 'table_name', 'varchar', '表名', 'tableName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (724, 62, 'database_name', 'varchar', '数据库名', 'databaseName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (725, 62, 'class_name', 'varchar', '类名', 'className', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (726, 62, 'table_comment', 'varchar', '说明', 'tableComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (727, 62, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (728, 62, 'author', 'varchar', '作者', 'author', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (729, 62, 'version', 'varchar', '项目版本号', 'version', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (730, 62, 'function_name', 'varchar', '功能名', 'functionName', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (731, 62, 'form_layout', 'tinyint', '表单布局  1：一列   2：两列', 'formLayout', 'Integer', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (732, 62, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (733, 62, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (734, 62, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 12, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:45', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (735, 63, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (736, 63, 'table_id', 'bigint', '表ID', 'tableId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (737, 63, 'field_name', 'varchar', '字段名称', 'fieldName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (738, 63, 'field_type', 'varchar', '字段类型', 'fieldType', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (739, 63, 'field_comment', 'varchar', '字段说明', 'fieldComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (740, 63, 'attr_name', 'varchar', '属性名', 'attrName', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (741, 63, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (742, 63, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (743, 63, 'sort', 'int', '排序', 'sort', 'Integer', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (744, 63, 'auto_fill', 'varchar', '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE', 'autoFill', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (745, 63, 'primary_pk', 'tinyint', '主键 0：否  1：是', 'primaryPk', 'Integer', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (746, 63, 'logic_delete', 'tinyint', '逻辑删除 0：否  1：是', 'logicDelete', 'Integer', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (747, 63, 'logic_delete_value', 'varchar', '逻辑删除值', 'logicDeleteValue', 'String', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (748, 63, 'logic_not_delete_value', 'varchar', '逻辑未删除值', 'logicNotDeleteValue', 'String', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (749, 63, 'base_field', 'tinyint', '基类字段 0：否  1：是', 'baseField', 'Integer', NULL, 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (750, 63, 'form_item', 'tinyint', '表单项 0：否  1：是', 'formItem', 'Integer', NULL, 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (751, 63, 'form_required', 'tinyint', '表单必填 0：否  1：是', 'formRequired', 'Integer', NULL, 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (752, 63, 'form_type', 'varchar', '表单类型', 'formType', 'String', NULL, 17, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (753, 63, 'form_dict', 'varchar', '表单字典类型', 'formDict', 'String', NULL, 18, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (754, 63, 'form_validator', 'varchar', '表单效验', 'formValidator', 'String', NULL, 19, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (755, 63, 'grid_item', 'tinyint', '列表项 0：否  1：是', 'gridItem', 'Integer', NULL, 20, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (756, 63, 'grid_sort', 'tinyint', '列表排序 0：否  1：是', 'gridSort', 'Integer', NULL, 21, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (757, 63, 'query_item', 'tinyint', '查询项 0：否  1：是', 'queryItem', 'Integer', NULL, 22, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (758, 63, 'query_type', 'varchar', '查询方式', 'queryType', 'String', NULL, 23, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (759, 63, 'query_form_type', 'varchar', '查询表单类型', 'queryFormType', 'String', NULL, 24, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (760, 63, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 25, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (761, 63, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 26, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (762, 63, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 27, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (763, 64, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (764, 64, 'template_group_id', 'bigint', '模板组id', 'templateGroupId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (765, 64, 'template_name', 'varchar', '模板名称', 'templateName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (766, 64, 'generator_path', 'varchar', '生成代码的路径', 'generatorPath', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (767, 64, 'template_desc', 'varchar', '模板描述', 'templateDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (768, 64, 'template_content', 'text', '模板内容', 'templateContent', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (769, 64, 'template_type', 'tinyint', '模板类型（0-文件，1-文件夹）', 'templateType', 'Integer', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (770, 64, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (771, 64, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (772, 64, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (773, 65, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (774, 65, 'group_name', 'varchar', '模板组名称', 'groupName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (775, 65, 'type', 'tinyint', '模板组类型（0-项目，1-表）', 'type', 'Integer', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (776, 65, 'group_desc', 'varchar', '模板组描述', 'groupDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (777, 65, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (778, 65, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (779, 65, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', NULL, 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, NULL, 'text', NULL, NULL, 1, NULL, NULL, 0, '=', NULL, 'text', '2025-05-13 09:48:46', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (780, 66, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (781, 66, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (782, 66, 'code', 'varchar', '基类编码', 'code', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (783, 66, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (784, 66, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (785, 66, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (786, 66, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (787, 66, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', NULL, 'text', '2025-05-14 12:20:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1311, 109, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1312, 109, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1313, 109, 'code', 'varchar', '基类编码', 'code', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1314, 109, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1315, 109, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1316, 109, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1317, 109, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1318, 109, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'checkbox', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1319, 110, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1320, 110, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1321, 110, 'conn_name', 'varchar', '连接名', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1322, 110, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1323, 110, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1324, 110, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1325, 110, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1326, 110, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1327, 110, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1328, 110, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1329, 111, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1330, 111, 'column_type', 'varchar', '字段类型', 'columnType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1331, 111, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1332, 111, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1333, 111, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1334, 111, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1335, 111, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1336, 112, 'id', 'bigint', 'ID主键自增', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1337, 112, 'project_name', 'varchar', '项目名称', 'projectName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1338, 112, 'project_package', 'varchar', '项目包名', 'projectPackage', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1339, 112, 'project_version', 'varchar', '项目版本', 'projectVersion', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1340, 112, 'datasource_id', 'bigint', '数据源ID', 'datasourceId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1341, 112, 'project_template_group_id', 'bigint', '项目模板组ID', 'projectTemplateGroupId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1342, 112, 'table_template_group_id', 'bigint', '表模板组ID', 'tableTemplateGroupId', 'Long', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1343, 112, 'backend_path', 'varchar', '后端路径', 'backendPath', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1344, 112, 'frontend_path', 'varchar', '前端路径', 'frontendPath', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1345, 112, 'project_desc', 'varchar', '项目描述', 'projectDesc', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1346, 112, 'author', 'varchar', '作者', 'author', 'String', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1347, 112, 'base_class_id', 'bigint', '基类ID', 'baseClassId', 'Long', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1348, 112, 'generator_type', 'tinyint', '生成方式（0-zip压缩包，1-服务器本地）', 'generatorType', 'Boolean', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1349, 112, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 1, 0, 13, 0, '=', 13, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1350, 112, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 1, 0, 14, 0, '=', 14, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1351, 112, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 15, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 15, NULL, 1, 0, 15, 0, '=', 15, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1352, 113, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1353, 113, 'table_name', 'varchar', '表名', 'tableName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1354, 113, 'database_name', 'varchar', '数据库名', 'databaseName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1355, 113, 'class_name', 'varchar', '类名', 'className', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1356, 113, 'table_comment', 'varchar', '说明', 'tableComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1357, 113, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1358, 113, 'author', 'varchar', '作者', 'author', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1359, 113, 'version', 'varchar', '项目版本号', 'version', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1360, 113, 'function_name', 'varchar', '功能名', 'functionName', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1361, 113, 'form_layout', 'tinyint', '表单布局  1：一列   2：两列', 'formLayout', 'Boolean', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1362, 113, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1363, 113, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1364, 113, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 12, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1365, 114, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1366, 114, 'table_id', 'bigint', '表ID', 'tableId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1367, 114, 'field_name', 'varchar', '字段名称', 'fieldName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1368, 114, 'field_type', 'varchar', '字段类型', 'fieldType', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1369, 114, 'field_comment', 'varchar', '字段说明', 'fieldComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1370, 114, 'attr_name', 'varchar', '属性名', 'attrName', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1371, 114, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1372, 114, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1373, 114, 'field_sort', 'int', '字段顺序', 'fieldSort', 'Integer', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1374, 114, 'auto_fill', 'varchar', '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE', 'autoFill', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1375, 114, 'primary_pk', 'tinyint', '主键 0：否  1：是', 'primaryPk', 'Boolean', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1376, 114, 'logic_delete', 'tinyint', '逻辑删除 0：否  1：是', 'logicDelete', 'Boolean', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1377, 114, 'logic_delete_value', 'varchar', '逻辑删除值', 'logicDeleteValue', 'String', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1378, 114, 'logic_not_delete_value', 'varchar', '逻辑未删除值', 'logicNotDeleteValue', 'String', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 1, 0, 13, 0, '=', 13, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1379, 114, 'form_item', 'tinyint', '表单项 0：否  1：是', 'formItem', 'Boolean', NULL, 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 1, 0, 14, 0, '=', 14, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1380, 114, 'form_required', 'tinyint', '表单必填 0：否  1：是', 'formRequired', 'Boolean', NULL, 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 1, 0, 15, 0, '=', 15, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1381, 114, 'form_type', 'varchar', '表单类型', 'formType', 'String', NULL, 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 1, 0, 16, 0, '=', 16, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1383, 114, 'form_field_sort', 'int', '表单字段顺序', 'formFieldSort', 'Integer', NULL, 18, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 18, NULL, 1, 0, 18, 0, '=', 18, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1384, 114, 'form_validator', 'varchar', '表单效验', 'formValidator', 'String', NULL, 19, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 19, NULL, 1, 0, 19, 0, '=', 19, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1385, 114, 'grid_item', 'tinyint', '列表项 0：否  1：是', 'gridItem', 'Boolean', NULL, 20, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 20, NULL, 1, 0, 20, 0, '=', 20, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1386, 114, 'grid_sort', 'tinyint', '列表排序 0：否  1：是', 'gridSort', 'Boolean', NULL, 21, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 21, NULL, 1, 0, 21, 0, '=', 21, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1387, 114, 'grid_field_sort', 'int', '列表字段顺序', 'gridFieldSort', 'Integer', NULL, 22, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 22, NULL, 1, 0, 22, 0, '=', 22, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1388, 114, 'query_item', 'tinyint', '查询项 0：否  1：是', 'queryItem', 'Boolean', NULL, 23, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 23, NULL, 1, 0, 23, 0, '=', 23, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1389, 114, 'query_type', 'varchar', '查询方式', 'queryType', 'String', NULL, 24, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 24, NULL, 1, 0, 24, 0, '=', 24, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1390, 114, 'query_field_sort', 'int', '查询字段顺序', 'queryFieldSort', 'Integer', NULL, 25, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 25, NULL, 1, 0, 25, 0, '=', 25, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1391, 114, 'query_form_type', 'varchar', '查询表单类型', 'queryFormType', 'String', NULL, 26, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 26, NULL, 1, 0, 26, 0, '=', 26, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1392, 114, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 27, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 27, NULL, 1, 0, 27, 0, '=', 27, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1393, 114, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 28, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 28, NULL, 1, 0, 28, 0, '=', 28, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1394, 114, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 29, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 29, NULL, 1, 0, 29, 0, '=', 29, 'text', '2025-05-15 09:44:49', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1395, 115, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1396, 115, 'template_group_id', 'bigint', '模板组id', 'templateGroupId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1397, 115, 'template_name', 'varchar', '模板名称', 'templateName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1398, 115, 'generator_path', 'varchar', '生成代码的路径', 'generatorPath', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1399, 115, 'template_desc', 'varchar', '模板描述', 'templateDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1400, 115, 'template_content', 'text', '模板内容', 'templateContent', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1401, 115, 'template_type', 'tinyint', '模板类型（0-文件，1-文件夹）', 'templateType', 'Boolean', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1402, 115, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1403, 115, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1404, 115, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-15 09:44:49', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1405, 116, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1406, 116, 'group_name', 'varchar', '模板组名称', 'groupName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1407, 116, 'type', 'tinyint', '模板组类型（0-项目，1-表）', 'type', 'Integer', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, 1, 0, 1, 0, 'text', 2, 'NotNull', 1, 0, 2, 1, '=', 2, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1408, 116, 'group_desc', 'varchar', '模板组描述', 'groupDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, 'NotBlank', 1, 0, 3, 0, '=', 3, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1409, 116, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1410, 116, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1411, 116, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', NULL, 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 0, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-15 09:44:49', '2025-06-12 10:39:47', 0);
INSERT INTO `gen_table_field` VALUES (1515, 114, 'dict', 'tinyint', '是否为字典 0：否  1：是', 'dict', 'Boolean', '', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 1, 0, 14, 0, '=', 14, 'text', '2025-05-15 16:07:45', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1516, 114, 'dict_value', 'varchar', '字典值。key-value形式。key为字典值，value为展示值，使用\'、\'拼接', 'dictValue', 'String', NULL, 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 1, 0, 15, 0, '=', 15, 'text', '2025-05-15 16:07:45', '2025-06-10 10:48:45', 0);
INSERT INTO `gen_table_field` VALUES (1517, 125, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1518, 125, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1519, 125, 'code', 'varchar', '基类编码', 'code', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1520, 125, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1521, 125, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1522, 125, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1523, 125, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1524, 125, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1525, 126, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1526, 126, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1527, 126, 'conn_name', 'varchar', '连接名', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1528, 126, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1529, 126, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1530, 126, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1531, 126, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1532, 126, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1533, 126, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1534, 126, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1535, 127, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1536, 127, 'enum_name', 'varchar', '枚举名称', 'enumName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 1, 'text', 1, NULL, 1, 0, 1, 1, '=', 1, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1538, 127, 'enum_desc', 'varchar', '枚举描述', 'enumDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 1, 'text', 4, NULL, 1, 0, 4, 0, '=', 3, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1539, 127, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 1, 'editor', 3, NULL, 1, 0, 3, 1, '=', 0, 'select', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1540, 127, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1541, 127, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1542, 127, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 0, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:19', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1543, 128, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1544, 128, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 1, '=', 1, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1545, 128, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1546, 128, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1548, 128, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1549, 128, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1550, 128, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1551, 128, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1552, 129, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1553, 129, 'column_type', 'varchar', '字段类型', 'columnType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1554, 129, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1555, 129, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1556, 129, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1557, 129, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1558, 129, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1559, 130, 'id', 'bigint', 'ID主键自增', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1560, 130, 'project_name', 'varchar', '项目名称', 'projectName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1561, 130, 'project_package', 'varchar', '项目包名', 'projectPackage', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1562, 130, 'project_version', 'varchar', '项目版本', 'projectVersion', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1563, 130, 'datasource_id', 'bigint', '数据源ID', 'datasourceId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1564, 130, 'project_template_group_id', 'bigint', '项目模板组ID', 'projectTemplateGroupId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1565, 130, 'table_template_group_id', 'bigint', '表模板组ID', 'tableTemplateGroupId', 'Long', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1566, 130, 'backend_path', 'varchar', '后端路径', 'backendPath', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1567, 130, 'frontend_path', 'varchar', '前端路径', 'frontendPath', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1568, 130, 'project_desc', 'varchar', '项目描述', 'projectDesc', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1569, 130, 'author', 'varchar', '作者', 'author', 'String', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1571, 130, 'generator_type', 'tinyint', '生成方式（0-zip压缩包，1-服务器本地）', 'generatorType', 'Integer', '', 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1572, 130, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 1, 0, 13, 0, '=', 13, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1573, 130, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 1, 0, 14, 0, '=', 14, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1574, 130, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 15, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 15, NULL, 1, 0, 15, 0, '=', 15, 'text', '2025-05-19 10:33:20', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (1575, 131, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1576, 131, 'table_name', 'varchar', '表名', 'tableName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1577, 131, 'database_name', 'varchar', '数据库名', 'databaseName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1578, 131, 'class_name', 'varchar', '类名', 'className', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1579, 131, 'table_comment', 'varchar', '说明', 'tableComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1580, 131, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1581, 131, 'author', 'varchar', '作者', 'author', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1582, 131, 'version', 'varchar', '版本', 'version', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1583, 131, 'function_name', 'varchar', '功能名', 'functionName', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1584, 131, 'form_layout', 'tinyint', '表单布局  1：一列   2：两列', 'formLayout', 'Integer', '', 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1585, 131, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1586, 131, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1587, 131, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 12, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-19 10:33:20', '2025-06-16 14:26:27', 0);
INSERT INTO `gen_table_field` VALUES (1588, 132, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1589, 132, 'table_id', 'bigint', '表ID', 'tableId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1590, 132, 'field_name', 'varchar', '字段名称', 'fieldName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1591, 132, 'field_type', 'varchar', '字段类型', 'fieldType', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1592, 132, 'field_comment', 'varchar', '字段说明', 'fieldComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1593, 132, 'attr_name', 'varchar', '属性名', 'attrName', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1594, 132, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1595, 132, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1596, 132, 'field_sort', 'int', '字段顺序', 'fieldSort', 'Integer', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1597, 132, 'auto_fill', 'varchar', '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE', 'autoFill', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1598, 132, 'primary_pk', 'tinyint', '主键 0：否  1：是', 'primaryPk', 'Integer', '', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1599, 132, 'logic_delete', 'tinyint', '逻辑删除 0：否  1：是', 'logicDelete', 'Integer', '', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1600, 132, 'logic_delete_value', 'varchar', '逻辑删除值', 'logicDeleteValue', 'String', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1601, 132, 'logic_not_delete_value', 'varchar', '逻辑未删除值', 'logicNotDeleteValue', 'String', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 1, 0, 13, 0, '=', 13, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1604, 132, 'form_item', 'tinyint', '表单项 0：否  1：是', 'formItem', 'Integer', '', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 1, 0, 16, 0, '=', 16, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1605, 132, 'form_required', 'tinyint', '表单必填 0：否  1：是', 'formRequired', 'Integer', '', 17, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 17, NULL, 1, 0, 17, 0, '=', 17, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1606, 132, 'form_type', 'varchar', '表单类型', 'formType', 'String', NULL, 18, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 18, NULL, 1, 0, 18, 0, '=', 18, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1607, 132, 'form_field_sort', 'int', '表单字段顺序', 'formFieldSort', 'Integer', NULL, 19, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 19, NULL, 1, 0, 19, 0, '=', 19, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1608, 132, 'form_validator', 'varchar', '表单效验', 'formValidator', 'String', NULL, 20, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 20, NULL, 1, 0, 20, 0, '=', 20, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1609, 132, 'grid_item', 'tinyint', '列表项 0：否  1：是', 'gridItem', 'Integer', '', 21, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 21, NULL, 1, 0, 21, 0, '=', 21, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1610, 132, 'grid_sort', 'tinyint', '列表排序 0：否  1：是', 'gridSort', 'Integer', '', 22, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 22, NULL, 1, 0, 22, 0, '=', 22, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1611, 132, 'grid_field_sort', 'int', '列表字段顺序', 'gridFieldSort', 'Integer', NULL, 23, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 23, NULL, 1, 0, 23, 0, '=', 23, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1612, 132, 'query_item', 'tinyint', '查询项 0：否  1：是', 'queryItem', 'Integer', '', 24, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 24, NULL, 1, 0, 24, 0, '=', 24, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1613, 132, 'query_type', 'varchar', '查询方式', 'queryType', 'String', NULL, 25, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 25, NULL, 1, 0, 25, 0, '=', 25, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1614, 132, 'query_field_sort', 'int', '查询字段顺序', 'queryFieldSort', 'Integer', NULL, 26, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 26, NULL, 1, 0, 26, 0, '=', 26, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1615, 132, 'query_form_type', 'varchar', '查询表单类型', 'queryFormType', 'String', NULL, 27, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 27, NULL, 1, 0, 27, 0, '=', 27, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1616, 132, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 28, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 28, NULL, 1, 0, 28, 0, '=', 28, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1617, 132, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 29, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 29, NULL, 1, 0, 29, 0, '=', 29, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1618, 132, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 30, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 30, NULL, 1, 0, 30, 0, '=', 30, 'text', '2025-05-19 10:33:20', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (1619, 133, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1620, 133, 'template_group_id', 'bigint', '模板组id', 'templateGroupId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1621, 133, 'template_name', 'varchar', '模板名称', 'templateName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1622, 133, 'generator_path', 'varchar', '生成代码的路径', 'generatorPath', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1623, 133, 'template_desc', 'varchar', '模板描述', 'templateDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1624, 133, 'template_content', 'text', '模板内容', 'templateContent', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1625, 133, 'template_type', 'tinyint', '模板类型（0-文件，1-文件夹）', 'templateType', 'Boolean', '', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1626, 133, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1627, 133, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1628, 133, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1629, 134, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1630, 134, 'group_name', 'varchar', '模板组名称', 'groupName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1631, 134, 'type', 'tinyint', '模板组类型（0-项目，1-表）', 'type', 'Boolean', '', 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1632, 134, 'group_desc', 'varchar', '模板组描述', 'groupDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1633, 134, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1634, 134, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1635, 134, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 10:33:20', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1874, 155, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1875, 155, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1876, 155, 'code', 'varchar', '基类编码', 'code', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1877, 155, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1878, 155, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1879, 155, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1880, 155, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1881, 155, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1882, 156, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1883, 156, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1884, 156, 'conn_name', 'varchar', '连接名', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1885, 156, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1886, 156, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1887, 156, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1888, 156, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1889, 156, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1890, 156, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1891, 156, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1892, 157, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1893, 157, 'enum_name', 'varchar', '枚举名称', 'enumName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, 3, 0, 1, 1, 'radio', 1, NULL, 1, 1, 1, 1, 'like', 1, 'text', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1895, 157, 'enum_desc', 'varchar', '枚举描述', 'enumDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 1, 'text', 3, NULL, 1, 1, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1896, 157, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, 3, 0, 1, 1, 'select', 4, NULL, 1, 1, 1, 1, '=', 1, 'select', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1897, 157, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1898, 157, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 0, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1899, 157, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 0, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-06-27 15:40:27', 0);
INSERT INTO `gen_table_field` VALUES (1900, 158, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1901, 158, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1902, 158, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1903, 158, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1905, 158, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1906, 158, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1907, 158, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1908, 158, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-06-09 14:21:31', 0);
INSERT INTO `gen_table_field` VALUES (1932, 161, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1933, 161, 'table_name', 'varchar', '表名', 'tableName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1934, 161, 'database_name', 'varchar', '数据库名', 'databaseName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1935, 161, 'class_name', 'varchar', '类名', 'className', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1936, 161, 'table_comment', 'varchar', '说明', 'tableComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1937, 161, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1938, 161, 'author', 'varchar', '作者', 'author', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1939, 161, 'version', 'varchar', '版本', 'version', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1940, 161, 'function_name', 'varchar', '功能名', 'functionName', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1941, 161, 'form_layout', 'tinyint', '表单布局  1：一列   2：两列', 'formLayout', 'Boolean', '', 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1942, 161, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1943, 161, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1944, 161, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 12, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1945, 162, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1946, 162, 'table_id', 'bigint', '表ID', 'tableId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1947, 162, 'field_name', 'varchar', '字段名称', 'fieldName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1948, 162, 'field_type', 'varchar', '字段类型', 'fieldType', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1949, 162, 'field_comment', 'varchar', '字段说明', 'fieldComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1950, 162, 'attr_name', 'varchar', '属性名', 'attrName', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1951, 162, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1952, 162, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1953, 162, 'field_sort', 'int', '字段顺序', 'fieldSort', 'Integer', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1954, 162, 'auto_fill', 'varchar', '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE', 'autoFill', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1955, 162, 'primary_pk', 'tinyint', '主键 0：否  1：是', 'primaryPk', 'Boolean', '', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 1, 0, 10, 0, '=', 10, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1956, 162, 'logic_delete', 'tinyint', '逻辑删除 0：否  1：是', 'logicDelete', 'Boolean', '', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 1, 0, 11, 0, '=', 11, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1957, 162, 'logic_delete_value', 'varchar', '逻辑删除值', 'logicDeleteValue', 'String', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 1, 0, 12, 0, '=', 12, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1958, 162, 'logic_not_delete_value', 'varchar', '逻辑未删除值', 'logicNotDeleteValue', 'String', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 1, 0, 13, 0, '=', 13, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1959, 162, 'dict', 'tinyint', '是否为字典 0：否  1：是', 'dict', 'Boolean', '', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 1, 0, 14, 0, '=', 14, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1960, 162, 'dict_value', 'varchar', '字典值。key-value形式。key为字典值，value为展示值，使用\"、\"拼接', 'dictValue', 'String', NULL, 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 1, 0, 15, 0, '=', 15, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1961, 162, 'form_item', 'tinyint', '表单项 0：否  1：是', 'formItem', 'Boolean', '', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 1, 0, 16, 0, '=', 16, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1962, 162, 'form_required', 'tinyint', '表单必填 0：否  1：是', 'formRequired', 'Boolean', '', 17, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 17, NULL, 1, 0, 17, 0, '=', 17, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1963, 162, 'form_type', 'varchar', '表单类型', 'formType', 'String', NULL, 18, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 18, NULL, 1, 0, 18, 0, '=', 18, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1964, 162, 'form_field_sort', 'int', '表单字段顺序', 'formFieldSort', 'Integer', NULL, 19, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 19, NULL, 1, 0, 19, 0, '=', 19, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1965, 162, 'form_validator', 'varchar', '表单效验', 'formValidator', 'String', NULL, 20, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 20, NULL, 1, 0, 20, 0, '=', 20, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1966, 162, 'grid_item', 'tinyint', '列表项 0：否  1：是', 'gridItem', 'Boolean', '', 21, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 21, NULL, 1, 0, 21, 0, '=', 21, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1967, 162, 'grid_sort', 'tinyint', '列表排序 0：否  1：是', 'gridSort', 'Boolean', '', 22, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 22, NULL, 1, 0, 22, 0, '=', 22, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1968, 162, 'grid_field_sort', 'int', '列表字段顺序', 'gridFieldSort', 'Integer', NULL, 23, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 23, NULL, 1, 0, 23, 0, '=', 23, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1969, 162, 'query_item', 'tinyint', '查询项 0：否  1：是', 'queryItem', 'Boolean', '', 24, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 24, NULL, 1, 0, 24, 0, '=', 24, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1970, 162, 'query_type', 'varchar', '查询方式', 'queryType', 'String', NULL, 25, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 25, NULL, 1, 0, 25, 0, '=', 25, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1971, 162, 'query_field_sort', 'int', '查询字段顺序', 'queryFieldSort', 'Integer', NULL, 26, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 26, NULL, 1, 0, 26, 0, '=', 26, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1972, 162, 'query_form_type', 'varchar', '查询表单类型', 'queryFormType', 'String', NULL, 27, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 27, NULL, 1, 0, 27, 0, '=', 27, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1973, 162, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 28, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 28, NULL, 1, 0, 28, 0, '=', 28, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1974, 162, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 29, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 29, NULL, 1, 0, 29, 0, '=', 29, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1975, 162, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 30, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 30, NULL, 1, 0, 30, 0, '=', 30, 'text', '2025-05-19 11:05:41', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1976, 163, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1977, 163, 'template_group_id', 'bigint', '模板组id', 'templateGroupId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1978, 163, 'template_name', 'varchar', '模板名称', 'templateName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1979, 163, 'generator_path', 'varchar', '生成代码的路径', 'generatorPath', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1980, 163, 'template_desc', 'varchar', '模板描述', 'templateDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1981, 163, 'template_content', 'text', '模板内容', 'templateContent', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1982, 163, 'template_type', 'tinyint', '模板类型（0-文件，1-文件夹）', 'templateType', 'Boolean', '', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1983, 163, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1984, 163, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 1, 0, 8, 0, '=', 8, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1985, 163, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 1, 0, 9, 0, '=', 9, 'text', '2025-05-19 11:05:41', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1986, 164, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 1, 0, 0, 0, '=', 0, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1987, 164, 'group_name', 'varchar', '模板组名称', 'groupName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 1, 0, 1, 0, '=', 1, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1988, 164, 'type', 'tinyint', '模板组类型（0-项目，1-表）', 'type', 'Boolean', '', 2, 'DEFAULT', 0, 0, NULL, NULL, 3, 0, 1, 0, 'select', 2, NULL, 1, 0, 2, 0, '=', 2, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1989, 164, 'group_desc', 'varchar', '模板组描述', 'groupDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 1, 0, 3, 0, '=', 3, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1990, 164, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 1, 0, 4, 0, '=', 4, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1991, 164, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 1, 0, 5, 0, '=', 5, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1992, 164, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Boolean', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 1, 0, 6, 0, '=', 6, 'text', '2025-05-19 11:05:41', '2025-05-21 17:29:42', 0);
INSERT INTO `gen_table_field` VALUES (1993, 112, 'enum_template_group_id', 'bigint', '枚举模板组ID', 'enumTemplateGroupId', 'Long', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-19 15:57:29', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1994, 133, 'file_write_type', 'tinyint', '文件写入方式（0-覆盖，1-追加）', 'fileWriteType', 'Boolean', '', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-20 10:58:13', '2025-05-21 17:06:34', 0);
INSERT INTO `gen_table_field` VALUES (1995, 163, 'file_write_type', 'tinyint', '文件写入方式（0-覆盖，1-追加）', 'fileWriteType', 'Boolean', '', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 1, 0, 7, 0, '=', 7, 'text', '2025-05-20 11:01:12', '2025-06-06 09:48:40', 0);
INSERT INTO `gen_table_field` VALUES (1996, 165, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (1997, 165, 'enum_name', 'varchar', '枚举名称', 'enumName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (1998, 165, 'enum_desc', 'varchar', '枚举描述', 'enumDesc', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (1999, 165, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (2000, 165, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (2001, 165, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (2002, 165, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-05-29 13:52:30', '2025-05-29 13:52:30', 0);
INSERT INTO `gen_table_field` VALUES (2003, 166, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2004, 166, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2005, 166, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2006, 166, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2007, 166, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2008, 166, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2009, 166, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2010, 166, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-05-29 13:57:52', '2025-05-29 13:57:52', 0);
INSERT INTO `gen_table_field` VALUES (2011, 167, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2012, 167, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2013, 167, 'code', 'varchar', '基类编码', 'code', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2014, 167, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2015, 167, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2016, 167, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2017, 167, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2018, 167, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-06-03 16:46:09', '2025-06-03 16:46:09', 0);
INSERT INTO `gen_table_field` VALUES (2019, 168, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 1, '=', 0, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2020, 168, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 1, '!=', 1, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2021, 168, 'conn_name', 'varchar', '连接名', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 1, '>', 2, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2022, 168, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 1, '>=', 3, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2023, 168, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 1, '<', 4, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2024, 168, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 1, '<=', 5, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2025, 168, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 1, '=', 6, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2026, 168, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 1, 'like', 7, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2027, 168, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 1, 'left like', 8, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2028, 168, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 1, 'right like', 9, 'text', '2025-06-03 16:47:00', '2025-06-09 13:51:02', 0);
INSERT INTO `gen_table_field` VALUES (2029, 169, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:06', 0);
INSERT INTO `gen_table_field` VALUES (2030, 169, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:06', 0);
INSERT INTO `gen_table_field` VALUES (2032, 169, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:06', 0);
INSERT INTO `gen_table_field` VALUES (2033, 169, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:06', 0);
INSERT INTO `gen_table_field` VALUES (2034, 169, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:07', 0);
INSERT INTO `gen_table_field` VALUES (2035, 169, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:07', 0);
INSERT INTO `gen_table_field` VALUES (2036, 169, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-06-05 15:05:54', '2025-07-02 14:03:07', 0);
INSERT INTO `gen_table_field` VALUES (2045, 130, 'enum_template_group_id', 'bigint', '枚举模板组ID', 'enumTemplateGroupId', 'Long', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-06-10 14:44:54', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (2046, 130, 'entity_base_class_id', 'bigint', 'Entity基类ID', 'entityBaseClassId', 'Long', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-06-10 14:44:54', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (2047, 130, 'vo_base_class_id', 'bigint', 'VO基类ID', 'voBaseClassId', 'Long', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 0, 0, 13, 0, '=', 13, 'text', '2025-06-10 14:44:54', '2025-06-10 14:46:29', 0);
INSERT INTO `gen_table_field` VALUES (2051, 132, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 0, 0, 14, 0, '=', 14, 'text', '2025-06-16 14:27:59', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (2052, 132, 'unique', 'tinyint', '唯一字段 0：否 1：是', 'unique', 'Integer', '', 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 0, 0, 15, 0, '=', 15, 'text', '2025-06-16 14:27:59', '2025-06-16 14:27:59', 0);
INSERT INTO `gen_table_field` VALUES (2054, 171, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2055, 171, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2056, 171, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2057, 171, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2058, 171, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2059, 171, 'enum_item_order', 'int', '枚举项排序', 'enumItemOrder', 'Integer', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2060, 171, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2061, 171, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2062, 171, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 8, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2063, 172, 'id', 'bigint', 'id', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2064, 172, 'column_type', 'varchar', '字段类型', 'columnType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2065, 172, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2066, 172, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2067, 172, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2068, 172, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2069, 172, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2070, 173, 'id', 'bigint', 'ID主键自增', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2071, 173, 'project_name', 'varchar', '项目名称', 'projectName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2072, 173, 'project_package', 'varchar', '项目包名', 'projectPackage', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2073, 173, 'project_version', 'varchar', '项目版本', 'projectVersion', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2074, 173, 'datasource_id', 'bigint', '数据源ID', 'datasourceId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2075, 173, 'project_template_group_id', 'bigint', '项目模板组ID', 'projectTemplateGroupId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2076, 173, 'table_template_group_id', 'bigint', '表模板组ID', 'tableTemplateGroupId', 'Long', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2077, 173, 'enum_template_group_id', 'bigint', '枚举模板组ID', 'enumTemplateGroupId', 'Long', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2078, 173, 'backend_path', 'varchar', '后端路径', 'backendPath', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2079, 173, 'frontend_path', 'varchar', '前端路径', 'frontendPath', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2080, 173, 'project_desc', 'varchar', '项目描述', 'projectDesc', 'String', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2081, 173, 'author', 'varchar', '作者', 'author', 'String', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2082, 173, 'entity_base_class_id', 'bigint', 'Entity基类ID', 'entityBaseClassId', 'Long', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2083, 173, 'vo_base_class_id', 'bigint', 'VO基类ID', 'voBaseClassId', 'Long', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 0, 0, 13, 0, '=', 13, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2084, 173, 'generator_type', 'tinyint', '生成方式（0-zip压缩包，1-服务器本地）', 'generatorType', 'Integer', '', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 0, 0, 14, 0, '=', 14, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2085, 173, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 0, 0, 15, 0, '=', 15, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2086, 173, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 0, 0, 16, 0, '=', 16, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2087, 173, 'is_delete', 'tinyint', '是否删除（0未删除, 1删除）', 'isDelete', 'Integer', '', 17, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 17, NULL, 0, 0, 17, 0, '=', 17, 'text', '2025-07-02 11:14:16', '2025-07-02 11:14:16', 0);
INSERT INTO `gen_table_field` VALUES (2088, 169, 'class_name', 'varchar', '基类类名', 'className', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-02 14:03:06', '2025-07-02 14:03:06', 0);
INSERT INTO `gen_table_field` VALUES (2089, 174, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2090, 174, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2091, 174, 'class_name', 'varchar', '基类类名', 'className', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2092, 174, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2093, 174, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2094, 174, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2095, 174, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2096, 174, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2097, 175, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2098, 175, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2099, 175, 'conn_name', 'varchar', '连接名称', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2100, 175, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2101, 175, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2102, 175, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2103, 175, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2104, 175, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2105, 175, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2106, 175, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2107, 176, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2108, 176, 'enum_name', 'varchar', '枚举名称', 'enumName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2109, 176, 'enum_desc', 'varchar', '枚举描述', 'enumDesc', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2110, 176, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2111, 176, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2112, 176, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2113, 176, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2114, 177, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2115, 177, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2116, 177, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2117, 177, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2118, 177, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2119, 177, 'enum_item_order', 'int', '枚举项排序', 'enumItemOrder', 'Integer', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2120, 177, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2121, 177, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2122, 177, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 8, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2123, 178, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2124, 178, 'column_type', 'varchar', '字段类型', 'columnType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2125, 178, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2126, 178, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2127, 178, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2128, 178, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2129, 178, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2130, 179, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2131, 179, 'project_name', 'varchar', '项目名称', 'projectName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2132, 179, 'project_package', 'varchar', '项目包名', 'projectPackage', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2133, 179, 'project_version', 'varchar', '项目版本', 'projectVersion', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2134, 179, 'datasource_id', 'bigint', '数据源ID', 'datasourceId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2135, 179, 'project_template_group_id', 'bigint', '项目模板组ID', 'projectTemplateGroupId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2136, 179, 'table_template_group_id', 'bigint', '表模板组ID', 'tableTemplateGroupId', 'Long', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2137, 179, 'enum_template_group_id', 'bigint', '枚举模板组ID', 'enumTemplateGroupId', 'Long', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2138, 179, 'backend_path', 'varchar', '后端路径', 'backendPath', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2139, 179, 'frontend_path', 'varchar', '前端路径', 'frontendPath', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2140, 179, 'project_desc', 'varchar', '项目描述', 'projectDesc', 'String', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2141, 179, 'author', 'varchar', '作者', 'author', 'String', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2142, 179, 'entity_base_class_id', 'bigint', 'Entity基类ID', 'entityBaseClassId', 'Long', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2143, 179, 'vo_base_class_id', 'bigint', 'VO基类ID', 'voBaseClassId', 'Long', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 0, 0, 13, 0, '=', 13, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2144, 179, 'generator_type', 'tinyint', '生成方式（0-zip压缩包，1-服务器本地）', 'generatorType', 'Integer', '', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 0, 0, 14, 0, '=', 14, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2145, 179, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 0, 0, 15, 0, '=', 15, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2146, 179, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 0, 0, 16, 0, '=', 16, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2147, 179, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 17, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 17, NULL, 0, 0, 17, 0, '=', 17, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2148, 180, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2149, 180, 'table_name', 'varchar', '表名', 'tableName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2150, 180, 'database_name', 'varchar', '数据库名', 'databaseName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2151, 180, 'class_name', 'varchar', '类名', 'className', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2152, 180, 'table_comment', 'varchar', '注释', 'tableComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2153, 180, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2154, 180, 'author', 'varchar', '作者', 'author', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2155, 180, 'version', 'varchar', '版本', 'version', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2156, 180, 'function_name', 'varchar', '功能名', 'functionName', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2157, 180, 'form_layout', 'tinyint', '表单布局  1：一列   2：两列', 'formLayout', 'Integer', '', 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2158, 180, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2159, 180, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2160, 180, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 12, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2161, 181, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2162, 181, 'table_id', 'bigint', '表ID', 'tableId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2163, 181, 'field_name', 'varchar', '字段名称', 'fieldName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2164, 181, 'field_type', 'varchar', '字段类型', 'fieldType', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2165, 181, 'field_comment', 'varchar', '字段说明', 'fieldComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2166, 181, 'attr_name', 'varchar', '属性名称', 'attrName', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2167, 181, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2168, 181, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2169, 181, 'field_sort', 'int', '字段顺序', 'fieldSort', 'Integer', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2170, 181, 'auto_fill', 'varchar', '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE', 'autoFill', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2171, 181, 'primary_pk', 'tinyint', '主键 0：否  1：是', 'primaryPk', 'Integer', '', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2172, 181, 'logic_delete', 'tinyint', '逻辑删除 0：否  1：是', 'logicDelete', 'Integer', '', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2173, 181, 'logic_delete_value', 'varchar', '逻辑删除值', 'logicDeleteValue', 'String', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2174, 181, 'logic_not_delete_value', 'varchar', '逻辑未删除值', 'logicNotDeleteValue', 'String', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 0, 0, 13, 0, '=', 13, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2175, 181, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 0, 0, 14, 0, '=', 14, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2176, 181, 'unique_field', 'tinyint', '唯一字段 0：否 1：是', 'uniqueField', 'Integer', '', 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 0, 0, 15, 0, '=', 15, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2177, 181, 'form_item', 'tinyint', '表单项 0：否  1：是', 'formItem', 'Integer', '', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 0, 0, 16, 0, '=', 16, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2178, 181, 'form_required', 'tinyint', '表单必填 0：否  1：是', 'formRequired', 'Integer', '', 17, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 17, NULL, 0, 0, 17, 0, '=', 17, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2179, 181, 'form_type', 'varchar', '表单类型', 'formType', 'String', NULL, 18, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 18, NULL, 0, 0, 18, 0, '=', 18, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2180, 181, 'form_field_sort', 'int', '表单字段顺序', 'formFieldSort', 'Integer', NULL, 19, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 19, NULL, 0, 0, 19, 0, '=', 19, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2181, 181, 'form_validator', 'varchar', '表单效验', 'formValidator', 'String', NULL, 20, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 20, NULL, 0, 0, 20, 0, '=', 20, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2182, 181, 'grid_item', 'tinyint', '列表项 0：否  1：是', 'gridItem', 'Integer', '', 21, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 21, NULL, 0, 0, 21, 0, '=', 21, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2183, 181, 'grid_sort', 'tinyint', '列表排序 0：否  1：是', 'gridSort', 'Integer', '', 22, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 22, NULL, 0, 0, 22, 0, '=', 22, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2184, 181, 'grid_field_sort', 'int', '列表字段顺序', 'gridFieldSort', 'Integer', NULL, 23, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 23, NULL, 0, 0, 23, 0, '=', 23, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2185, 181, 'query_item', 'tinyint', '查询项 0：否  1：是', 'queryItem', 'Integer', '', 24, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 24, NULL, 0, 0, 24, 0, '=', 24, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2186, 181, 'query_type', 'varchar', '查询方式', 'queryType', 'String', NULL, 25, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 25, NULL, 0, 0, 25, 0, '=', 25, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2187, 181, 'query_field_sort', 'int', '查询字段顺序', 'queryFieldSort', 'Integer', NULL, 26, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 26, NULL, 0, 0, 26, 0, '=', 26, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2188, 181, 'query_form_type', 'varchar', '查询表单类型', 'queryFormType', 'String', NULL, 27, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 27, NULL, 0, 0, 27, 0, '=', 27, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2189, 181, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 28, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 28, NULL, 0, 0, 28, 0, '=', 28, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2190, 181, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 29, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 29, NULL, 0, 0, 29, 0, '=', 29, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2191, 181, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 30, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 30, NULL, 0, 0, 30, 0, '=', 30, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2192, 182, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2193, 182, 'template_group_id', 'bigint', '模板组ID', 'templateGroupId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2194, 182, 'template_name', 'varchar', '模板名称', 'templateName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2195, 182, 'generator_path', 'varchar', '生成代码的路径', 'generatorPath', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2196, 182, 'template_desc', 'varchar', '模板描述', 'templateDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2197, 182, 'template_content', 'text', '模板内容', 'templateContent', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2198, 182, 'template_type', 'tinyint', '模板类型（0-文件，1-文件夹）', 'templateType', 'Integer', '', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2199, 182, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2200, 182, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2201, 182, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2202, 183, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2203, 183, 'group_name', 'varchar', '模板组名称', 'groupName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2204, 183, 'type', 'tinyint', '模板组类型（0-项目，1-表，2-枚举）', 'type', 'Integer', '', 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2205, 183, 'group_desc', 'varchar', '模板组描述', 'groupDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2206, 183, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2207, 183, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2208, 183, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:26:46', '2025-07-04 15:36:55', 1);
INSERT INTO `gen_table_field` VALUES (2209, 184, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2210, 184, 'package_name', 'varchar', '基类包名', 'packageName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2211, 184, 'class_name', 'varchar', '基类类名', 'className', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2212, 184, 'fields', 'varchar', '基类字段，多个用英文逗号分隔', 'fields', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2213, 184, 'remark', 'varchar', '备注', 'remark', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2214, 184, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2215, 184, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2216, 184, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 7, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2217, 185, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2218, 185, 'db_type', 'varchar', '数据库类型', 'dbType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2219, 185, 'conn_name', 'varchar', '连接名称', 'connName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2220, 185, 'conn_url', 'varchar', 'URL', 'connUrl', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2221, 185, 'username', 'varchar', '用户名', 'username', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2222, 185, 'password', 'varchar', '密码', 'password', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2223, 185, 'data_source_desc', 'varchar', '描述', 'dataSourceDesc', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2224, 185, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2225, 185, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2226, 185, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2227, 186, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2228, 186, 'enum_name', 'varchar', '枚举名称', 'enumName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2229, 186, 'enum_desc', 'varchar', '枚举描述', 'enumDesc', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2230, 186, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2231, 186, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2232, 186, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2233, 186, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2234, 187, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2235, 187, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2236, 187, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2237, 187, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2238, 187, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2239, 187, 'enum_item_order', 'int', '枚举项排序', 'enumItemOrder', 'Integer', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2240, 187, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2241, 187, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2242, 187, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 8, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2243, 188, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2244, 188, 'column_type', 'varchar', '字段类型', 'columnType', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2245, 188, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2246, 188, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2247, 188, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2248, 188, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2249, 188, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2250, 189, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2251, 189, 'project_name', 'varchar', '项目名称', 'projectName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2252, 189, 'project_package', 'varchar', '项目包名', 'projectPackage', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2253, 189, 'project_version', 'varchar', '项目版本', 'projectVersion', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2254, 189, 'datasource_id', 'bigint', '数据源ID', 'datasourceId', 'Long', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2255, 189, 'project_template_group_id', 'bigint', '项目模板组ID', 'projectTemplateGroupId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2256, 189, 'table_template_group_id', 'bigint', '表模板组ID', 'tableTemplateGroupId', 'Long', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2257, 189, 'enum_template_group_id', 'bigint', '枚举模板组ID', 'enumTemplateGroupId', 'Long', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2258, 189, 'backend_path', 'varchar', '后端路径', 'backendPath', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2259, 189, 'frontend_path', 'varchar', '前端路径', 'frontendPath', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2260, 189, 'project_desc', 'varchar', '项目描述', 'projectDesc', 'String', NULL, 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2261, 189, 'author', 'varchar', '作者', 'author', 'String', NULL, 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2262, 189, 'entity_base_class_id', 'bigint', 'Entity基类ID', 'entityBaseClassId', 'Long', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2263, 189, 'vo_base_class_id', 'bigint', 'VO基类ID', 'voBaseClassId', 'Long', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 0, 0, 13, 0, '=', 13, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2264, 189, 'generator_type', 'tinyint', '生成方式（0-zip压缩包，1-服务器本地）', 'generatorType', 'Integer', '', 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 0, 0, 14, 0, '=', 14, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2265, 189, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 0, 0, 15, 0, '=', 15, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2266, 189, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 0, 0, 16, 0, '=', 16, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2267, 189, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 17, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 17, NULL, 0, 0, 17, 0, '=', 17, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2268, 190, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2269, 190, 'table_name', 'varchar', '表名', 'tableName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2270, 190, 'database_name', 'varchar', '数据库名', 'databaseName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2271, 190, 'class_name', 'varchar', '类名', 'className', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2272, 190, 'table_comment', 'varchar', '注释', 'tableComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2273, 190, 'project_id', 'bigint', '项目ID', 'projectId', 'Long', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2274, 190, 'author', 'varchar', '作者', 'author', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2275, 190, 'version', 'varchar', '版本', 'version', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2276, 190, 'function_name', 'varchar', '功能名', 'functionName', 'String', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2277, 190, 'form_layout', 'tinyint', '表单布局  1：一列   2：两列', 'formLayout', 'Integer', '', 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2278, 190, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2279, 190, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2280, 190, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 12, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2281, 191, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2282, 191, 'table_id', 'bigint', '表ID', 'tableId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2283, 191, 'field_name', 'varchar', '字段名称', 'fieldName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2284, 191, 'field_type', 'varchar', '字段类型', 'fieldType', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2285, 191, 'field_comment', 'varchar', '字段说明', 'fieldComment', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2286, 191, 'attr_name', 'varchar', '属性名称', 'attrName', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2287, 191, 'attr_type', 'varchar', '属性类型', 'attrType', 'String', NULL, 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2288, 191, 'package_name', 'varchar', '属性包名', 'packageName', 'String', NULL, 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2289, 191, 'field_sort', 'int', '字段顺序', 'fieldSort', 'Integer', NULL, 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2290, 191, 'auto_fill', 'varchar', '自动填充  DEFAULT、INSERT、UPDATE、INSERT_UPDATE', 'autoFill', 'String', NULL, 9, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2291, 191, 'primary_pk', 'tinyint', '主键 0：否  1：是', 'primaryPk', 'Integer', '', 10, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 10, NULL, 0, 0, 10, 0, '=', 10, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2292, 191, 'logic_delete', 'tinyint', '逻辑删除 0：否  1：是', 'logicDelete', 'Integer', '', 11, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 11, NULL, 0, 0, 11, 0, '=', 11, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2293, 191, 'logic_delete_value', 'varchar', '逻辑删除值', 'logicDeleteValue', 'String', NULL, 12, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 12, NULL, 0, 0, 12, 0, '=', 12, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2294, 191, 'logic_not_delete_value', 'varchar', '逻辑未删除值', 'logicNotDeleteValue', 'String', NULL, 13, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 13, NULL, 0, 0, 13, 0, '=', 13, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2295, 191, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 14, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 14, NULL, 0, 0, 14, 0, '=', 14, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2296, 191, 'unique_field', 'tinyint', '唯一字段 0：否 1：是', 'uniqueField', 'Integer', '', 15, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 15, NULL, 0, 0, 15, 0, '=', 15, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2297, 191, 'form_item', 'tinyint', '表单项 0：否  1：是', 'formItem', 'Integer', '', 16, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 16, NULL, 0, 0, 16, 0, '=', 16, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2298, 191, 'form_required', 'tinyint', '表单必填 0：否  1：是', 'formRequired', 'Integer', '', 17, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 17, NULL, 0, 0, 17, 0, '=', 17, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2299, 191, 'form_type', 'varchar', '表单类型', 'formType', 'String', NULL, 18, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 18, NULL, 0, 0, 18, 0, '=', 18, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2300, 191, 'form_field_sort', 'int', '表单字段顺序', 'formFieldSort', 'Integer', NULL, 19, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 19, NULL, 0, 0, 19, 0, '=', 19, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2301, 191, 'form_validator', 'varchar', '表单效验', 'formValidator', 'String', NULL, 20, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 20, NULL, 0, 0, 20, 0, '=', 20, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2302, 191, 'grid_item', 'tinyint', '列表项 0：否  1：是', 'gridItem', 'Integer', '', 21, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 21, NULL, 0, 0, 21, 0, '=', 21, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2303, 191, 'grid_sort', 'tinyint', '列表排序 0：否  1：是', 'gridSort', 'Integer', '', 22, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 22, NULL, 0, 0, 22, 0, '=', 22, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2304, 191, 'grid_field_sort', 'int', '列表字段顺序', 'gridFieldSort', 'Integer', NULL, 23, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 23, NULL, 0, 0, 23, 0, '=', 23, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2305, 191, 'query_item', 'tinyint', '查询项 0：否  1：是', 'queryItem', 'Integer', '', 24, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 24, NULL, 0, 0, 24, 0, '=', 24, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2306, 191, 'query_type', 'varchar', '查询方式', 'queryType', 'String', NULL, 25, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 25, NULL, 0, 0, 25, 0, '=', 25, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2307, 191, 'query_field_sort', 'int', '查询字段顺序', 'queryFieldSort', 'Integer', NULL, 26, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 26, NULL, 0, 0, 26, 0, '=', 26, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2308, 191, 'query_form_type', 'varchar', '查询表单类型', 'queryFormType', 'String', NULL, 27, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 27, NULL, 0, 0, 27, 0, '=', 27, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2309, 191, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 28, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 28, NULL, 0, 0, 28, 0, '=', 28, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2310, 191, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 29, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 29, NULL, 0, 0, 29, 0, '=', 29, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2311, 191, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 30, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 30, NULL, 0, 0, 30, 0, '=', 30, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2312, 192, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2313, 192, 'template_group_id', 'bigint', '模板组ID', 'templateGroupId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2314, 192, 'template_name', 'varchar', '模板名称', 'templateName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2315, 192, 'generator_path', 'varchar', '生成代码的路径', 'generatorPath', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2316, 192, 'template_desc', 'varchar', '模板描述', 'templateDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2317, 192, 'template_content', 'text', '模板内容', 'templateContent', 'String', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2318, 192, 'template_type', 'tinyint', '模板类型（0-文件，1-文件夹）', 'templateType', 'Integer', '', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2319, 192, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2320, 192, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 8, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2321, 192, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 9, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 9, NULL, 0, 0, 9, 0, '=', 9, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2322, 193, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2323, 193, 'group_name', 'varchar', '模板组名称', 'groupName', 'String', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2324, 193, 'type', 'tinyint', '模板组类型（0-项目，1-表，2-枚举）', 'type', 'Integer', '', 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2325, 193, 'group_desc', 'varchar', '模板组描述', 'groupDesc', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2326, 193, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2327, 193, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2328, 193, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 6, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-04 15:41:45', '2025-07-04 15:41:58', 1);
INSERT INTO `gen_table_field` VALUES (2329, 194, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2330, 194, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2331, 194, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2332, 194, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2333, 194, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2334, 194, 'enum_item_order', 'int', '枚举项排序', 'enumItemOrder', 'Integer', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2335, 194, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2336, 194, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2337, 194, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 8, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-07 13:33:50', '2025-07-07 13:33:54', 1);
INSERT INTO `gen_table_field` VALUES (2338, 195, 'id', 'bigint', '主键ID', 'id', 'Long', NULL, 0, 'DEFAULT', 1, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 0, NULL, 0, 0, 0, 0, '=', 0, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2339, 195, 'enum_id', 'bigint', '枚举ID', 'enumId', 'Long', NULL, 1, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 1, NULL, 0, 0, 1, 0, '=', 1, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2340, 195, 'enum_item_name', 'varchar', '枚举项名称', 'enumItemName', 'String', NULL, 2, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 2, NULL, 0, 0, 2, 0, '=', 2, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2341, 195, 'enum_item_code', 'varchar', '枚举项编码', 'enumItemCode', 'String', NULL, 3, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 3, NULL, 0, 0, 3, 0, '=', 3, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2342, 195, 'enum_item_desc', 'varchar', '枚举项描述', 'enumItemDesc', 'String', NULL, 4, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 4, NULL, 0, 0, 4, 0, '=', 4, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2343, 195, 'enum_item_order', 'int', '枚举项排序', 'enumItemOrder', 'Integer', NULL, 5, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 5, NULL, 0, 0, 5, 0, '=', 5, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2344, 195, 'create_time', 'datetime', '创建时间', 'createTime', 'Date', 'java.util.Date', 6, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 6, NULL, 0, 0, 6, 0, '=', 6, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2345, 195, 'update_time', 'datetime', '修改时间', 'updateTime', 'Date', 'java.util.Date', 7, 'DEFAULT', 0, 0, NULL, NULL, NULL, 0, 1, 0, 'text', 7, NULL, 0, 0, 7, 0, '=', 7, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);
INSERT INTO `gen_table_field` VALUES (2346, 195, 'is_delete', 'tinyint', '是否删除（0-未删除，1-删除）', 'isDelete', 'Integer', '', 8, 'DEFAULT', 0, 1, '1', '0', NULL, 0, 1, 0, 'text', 8, NULL, 0, 0, 8, 0, '=', 8, 'text', '2025-07-07 13:55:37', '2025-07-07 13:55:37', 0);

-- ----------------------------
-- Table structure for gen_template
-- ----------------------------
DROP TABLE IF EXISTS `gen_template`;
CREATE TABLE `gen_template`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `template_group_id` bigint NULL DEFAULT NULL COMMENT '模板组ID',
  `template_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '模板名称',
  `generator_path` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成代码的路径',
  `template_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '模板描述',
  `template_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '模板内容',
  `template_type` tinyint NULL DEFAULT 0 COMMENT '模板类型（0-文件，1-文件夹）',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 255 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '模板' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_template
-- ----------------------------
INSERT INTO `gen_template` VALUES (1, 1, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'Controller模板', 'package ${projectPackage}.${projectNameDot}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameDot}.common.validation.group.InsertGroup;\nimport ${projectPackage}.${projectNameDot}.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameDot}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameDot}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk == 1>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}详情列表\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 6)\n    @Operation(summary = \"${tableComment}详情列表\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(<#if author!?length gt 0>author = \"${author}\", </#if>order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}\n', 0, '2025-04-25 14:04:07', '2025-06-05 11:08:55', 0);
INSERT INTO `gen_template` VALUES (3, 1, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameDot}.service;\n\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameDot}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameDot}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk == 1>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 详情列表\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, NULL, '2025-06-03 14:48:46', 0);
INSERT INTO `gen_template` VALUES (5, 1, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'ServiceImpl模板', 'package ${projectPackage}.${projectNameDot}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameDot}.common.exception.BusinessException;\nimport ${projectPackage}.${projectNameDot}.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameDot}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameDot}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameDot}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameDot}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameDot}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\nimport java.util.Objects;\n\nimport static ${projectPackage}.${projectNameDot}.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n<#function checkUnique fieldList>\n    <#list fieldList as field>\n        <#if field.uniqueField == 1>\n            <#return true>\n        </#if>\n    </#list>\n    <#return false>\n</#function>\n<#assign isUnique = checkUnique(fieldList)>\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        <#if isUnique>\n        //唯一性校验等\n        checkUnique(dto);\n        </#if>\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        <#if isUnique>\n        //唯一性校验等\n        checkUnique(dto);\n        </#if>\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk == 1>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //checkReference(List.of(dbEntity));\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> dbEntityList = ${className}Mapper.selectByIds(idList);\n        //checkReference(dbEntityList);\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 详情列表\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * ID查询\n     */\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n    \n    <#if isUnique>\n    /**\n     * 唯一性校验\n     */\n    private void checkUnique(${classNameUpper}DTO dto) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n\n        wrapper.ne(Objects.nonNull(dto.getId()), ${classNameUpper}Entity::getId, dto.getId());\n        <#list fieldList as field>\n            <#if field.uniqueField == 1>\n        wrapper.eq(${classNameUpper}Entity::get${field.attrName?cap_first}, dto.get${field.attrName?cap_first}());\n            </#if>\n        </#list>\n\n        boolean exists = ${className}Mapper.exists(wrapper);\n        if (exists) {\n            throw new BusinessException(\"${tableComment}已存在\");\n        }\n    }\n\n    </#if>\n    /**\n     * 校验能否被删除\n     */\n    private void checkReference(List<${classNameUpper}Entity> dbEntityList) {\n        //TODO 校验是否被引用\n        for (${classNameUpper}Entity dbEntity : dbEntityList) {\n\n        }\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        wrapper.eq(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'!=\'>\n        wrapper.ne(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'>\'>\n        wrapper.gt(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'>=\'>\n        wrapper.ge(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'<\'>\n        wrapper.lt(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'<=\'>\n        wrapper.le(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'like\'>\n        wrapper.like(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'left like\'>\n        wrapper.likeLeft(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#elseif field.queryType == \'right like\'>\n        wrapper.likeRight(MybatisUtil.isNotEmpty(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n            <#else>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrderItemList());\n        return wrapper;\n    }\n\n}\n', 0, NULL, '2025-06-17 09:54:43', 0);
INSERT INTO `gen_template` VALUES (6, 1, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameDot}.mapper;\n\nimport ${projectPackage}.${projectNameDot}.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameDot}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameDot}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, NULL, '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (7, 1, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameDot}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n        <if test=\"@${projectPackage}.${projectNameDot}.common.mybatis.util.MybatisUtil@isNotEmpty(query, \'${field.attrName}\')\">\n            <#if field.queryType == \'=\'>\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n            <#elseif field.queryType == \'!=\'>\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n            <#elseif field.queryType == \'>\'>\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n            <#elseif field.queryType == \'>=\'>\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n            <#elseif field.queryType == \'<\'>\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n            <#elseif field.queryType == \'<=\'>\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n            <#elseif field.queryType == \'like\'>\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n            <#elseif field.queryType == \'left like\'>\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n            <#elseif field.queryType == \'right like\'>\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n            <#else>\n            </#if>\n        </if>\n        </#list>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameDot}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk == 1>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete == 1>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"${projectPackage}.${projectNameDot}.common.mybatis.mapper.BaseMapperPlus.orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"${projectPackage}.${projectNameDot}.common.mybatis.mapper.BaseMapperPlus.orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"${projectPackage}.${projectNameDot}.common.mybatis.mapper.BaseMapperPlus.orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"${projectPackage}.${projectNameDot}.common.mybatis.mapper.BaseMapperPlus.orderBySQL\"/>\n    </select>\n\n</mapper>', 0, NULL, '2025-06-10 11:11:59', 0);
INSERT INTO `gen_template` VALUES (8, 1, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameDot}.mapstruct;\n\nimport ${projectPackage}.${projectNameDot}.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameDot}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameDot}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, NULL, '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (9, 1, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameDot}.domain.entity;\n\nimport lombok.Data;\n<#if entityBaseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if entityBaseClass??>\nimport ${entityBaseClass.packageName}.${entityBaseClass.className};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if entityBaseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if entityBaseClass??> extends ${entityBaseClass.className}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if field.entityBaseField == 0>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk == 1>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete == 1>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}\n', 0, NULL, '2025-07-02 14:10:33', 0);
INSERT INTO `gen_template` VALUES (10, 1, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameDot}.domain.dto;\n\n<#function importEnumcode formList>\n	<#list formList as formField>\n		<#if formField.entityBaseField == 0 && formField.enumId??>\n			<#return true>\n		</#if>\n	</#list>\n	<#return false>\n</#function>\n<#assign importEnumcode = importEnumcode(formList)>\nimport ${projectPackage}.${projectNameDot}.common.validation.group.UpdateGroup;\n<#if importEnumcode>\nimport ${projectPackage}.${projectNameDot}.common.validation.code.EnumCode;\n</#if>\n<#list formList as formField >\n<#if formField.entityBaseField == 0 && formField.enumId??>\nimport ${projectPackage}.${projectNameDot}.enums.${formField.enumNamePascal}Enum;\n</#if>\n</#list>\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list formList as formField>\n<#if formField.entityBaseField == 0>\n	/**\n	 * ${formField.fieldComment}\n	 */\n	@Schema(description = \"${formField.fieldComment}\")\n	<#if formField.primaryPk == 1>\n	@NotNull(message = \"${formField.fieldComment}不能为空\", groups = {UpdateGroup.class})\n	</#if>\n	<#if formField.formValidator?? && formField_has_next>\n	@${formField.formValidator}(message = \"${formField.fieldComment}不能为空\")\n	</#if>\n	<#if formField.enumId??>\n	@EnumCode(${formField.enumNamePascal}Enum.class)\n	</#if>\n	private ${formField.attrType} ${formField.attrName};\n\n</#if>\n</#list>\n}\n', 0, NULL, '2025-06-12 10:20:20', 0);
INSERT INTO `gen_template` VALUES (11, 1, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameDot}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO<#if voBaseClass??> extends ${voBaseClass.className}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if field.voBaseField == 0>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, NULL, '2025-07-02 14:10:45', 0);
INSERT INTO `gen_template` VALUES (12, 1, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameDot}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport ${projectPackage}.${projectNameDot}.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameDot}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n</#list>\n}\n', 0, NULL, '2025-06-10 10:57:38', 0);
INSERT INTO `gen_template` VALUES (13, 1, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameDot}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport ${projectPackage}.${projectNameDot}.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameDot}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n</#list>\n}\n', 0, NULL, '2025-06-10 10:58:07', 0);
INSERT INTO `gen_template` VALUES (111, NULL, '11', '11', '11', '11', 0, '2025-05-12 15:39:41', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (113, 22, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'controller模板', 'package ${projectPackage}.${projectNameUnderline}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.validation.group.InsertGroup;\nimport com.yanggu.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}批量查询\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(order = 6)\n    @Operation(summary = \"${tableComment}批量查询\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (114, 22, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameUnderline}.service;\n\nimport com.yanggu.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 批量查询\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (115, 22, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'Service实现类模板', 'package ${projectPackage}.${projectNameUnderline}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(like|left like|right like)\") || field.attrType?matches(\"(String)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport org.dromara.hutool.core.text.StrUtil;\n    </#if>\n</#if>\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.exception.BusinessException;\nimport com.yanggu.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameUnderline}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(=|!=|>|<|>=|<=)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport java.util.Objects;\n    </#if>\n</#if>\n\nimport static com.yanggu.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        //唯一性校验等\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        //唯一性校验等\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * 批量查询\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.eq(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.eq(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'!=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ne(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ne(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>\'>\n                <#if field.attrType == \'String\'>\n        wrapper.gt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.gt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ge(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ge(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<\'>\n                <#if field.attrType == \'String\'>\n        wrapper.lt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.lt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.le(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.le(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.like(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.like(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'left like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeLeft(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeLeft(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'right like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeRight(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeRight(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrders());\n        return wrapper;\n    }\n\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (116, 22, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameUnderline}.mapper;\n\nimport com.yanggu.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (117, 22, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'!=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#elseif field.queryType == \'left like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n        </if>\n            <#elseif field.queryType == \'right like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#else>\n            </#if>\n        </#list>\n    </sql>\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"query.orders != null and query.orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"query.orders\" item=\"order\" separator=\",\">\n                <#noparse>${order.column}</#noparse> <if test=\"order.isAsc\">ASC</if><if test=\"!order.isAsc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n</mapper>', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (118, 22, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameUnderline}.mapstruct;\n\nimport com.yanggu.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (119, 22, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.entity;\n\nimport lombok.Data;\n<#if baseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if baseClass??>\nimport ${baseClass.packageName}.${baseClass.code};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if baseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if baseClass??> extends ${baseClass.code}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (120, 22, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.dto;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (121, 22, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.yanggu.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO extends BaseVO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (122, 22, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (123, 22, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-13 18:08:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (124, 23, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'controller模板', 'package ${projectPackage}.${projectNameUnderline}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.validation.group.InsertGroup;\nimport com.yanggu.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}批量查询\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(order = 6)\n    @Operation(summary = \"${tableComment}批量查询\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (125, 23, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameUnderline}.service;\n\nimport com.yanggu.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 批量查询\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (126, 23, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'Service实现类模板', 'package ${projectPackage}.${projectNameUnderline}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(like|left like|right like)\") || field.attrType?matches(\"(String)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport org.dromara.hutool.core.text.StrUtil;\n    </#if>\n</#if>\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.exception.BusinessException;\nimport com.yanggu.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameUnderline}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(=|!=|>|<|>=|<=)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport java.util.Objects;\n    </#if>\n</#if>\n\nimport static com.yanggu.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        //唯一性校验等\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        //唯一性校验等\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * 批量查询\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.eq(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.eq(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'!=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ne(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ne(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>\'>\n                <#if field.attrType == \'String\'>\n        wrapper.gt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.gt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ge(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ge(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<\'>\n                <#if field.attrType == \'String\'>\n        wrapper.lt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.lt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.le(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.le(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.like(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.like(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'left like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeLeft(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeLeft(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'right like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeRight(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeRight(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrders());\n        return wrapper;\n    }\n\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (127, 23, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameUnderline}.mapper;\n\nimport com.yanggu.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (128, 23, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'!=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#elseif field.queryType == \'left like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n        </if>\n            <#elseif field.queryType == \'right like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#else>\n            </#if>\n        </#list>\n    </sql>\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"query.orders != null and query.orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"query.orders\" item=\"order\" separator=\",\">\n                <#noparse>${order.column}</#noparse> <if test=\"order.isAsc\">ASC</if><if test=\"!order.isAsc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n</mapper>', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (129, 23, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameUnderline}.mapstruct;\n\nimport com.yanggu.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (130, 23, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.entity;\n\nimport lombok.Data;\n<#if baseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if baseClass??>\nimport ${baseClass.packageName}.${baseClass.code};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if baseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if baseClass??> extends ${baseClass.code}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (131, 23, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.dto;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (132, 23, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.yanggu.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO extends BaseVO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (133, 23, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (134, 23, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:27:28', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (135, 24, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'controller模板', 'package ${projectPackage}.${projectNameUnderline}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.validation.group.InsertGroup;\nimport com.yanggu.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}批量查询\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(order = 6)\n    @Operation(summary = \"${tableComment}批量查询\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (136, 24, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameUnderline}.service;\n\nimport com.yanggu.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 批量查询\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (137, 24, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'Service实现类模板', 'package ${projectPackage}.${projectNameUnderline}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(like|left like|right like)\") || field.attrType?matches(\"(String)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport org.dromara.hutool.core.text.StrUtil;\n    </#if>\n</#if>\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.exception.BusinessException;\nimport com.yanggu.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameUnderline}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(=|!=|>|<|>=|<=)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport java.util.Objects;\n    </#if>\n</#if>\n\nimport static com.yanggu.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        //唯一性校验等\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        //唯一性校验等\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * 批量查询\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.eq(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.eq(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'!=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ne(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ne(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>\'>\n                <#if field.attrType == \'String\'>\n        wrapper.gt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.gt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ge(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ge(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<\'>\n                <#if field.attrType == \'String\'>\n        wrapper.lt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.lt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.le(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.le(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.like(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.like(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'left like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeLeft(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeLeft(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'right like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeRight(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeRight(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrders());\n        return wrapper;\n    }\n\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (138, 24, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameUnderline}.mapper;\n\nimport com.yanggu.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (139, 24, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'!=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#elseif field.queryType == \'left like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n        </if>\n            <#elseif field.queryType == \'right like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#else>\n            </#if>\n        </#list>\n    </sql>\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"query.orders != null and query.orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"query.orders\" item=\"order\" separator=\",\">\n                <#noparse>${order.column}</#noparse> <if test=\"order.isAsc\">ASC</if><if test=\"!order.isAsc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n</mapper>', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (140, 24, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameUnderline}.mapstruct;\n\nimport com.yanggu.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (141, 24, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.entity;\n\nimport lombok.Data;\n<#if baseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if baseClass??>\nimport ${baseClass.packageName}.${baseClass.code};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if baseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if baseClass??> extends ${baseClass.code}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (142, 24, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.dto;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (143, 24, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.yanggu.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO extends BaseVO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (144, 24, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (145, 24, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:30:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (146, 25, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'controller模板', 'package ${projectPackage}.${projectNameUnderline}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.validation.group.InsertGroup;\nimport com.yanggu.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}批量查询\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(order = 6)\n    @Operation(summary = \"${tableComment}批量查询\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (147, 25, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameUnderline}.service;\n\nimport com.yanggu.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 批量查询\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (148, 25, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'Service实现类模板', 'package ${projectPackage}.${projectNameUnderline}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(like|left like|right like)\") || field.attrType?matches(\"(String)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport org.dromara.hutool.core.text.StrUtil;\n    </#if>\n</#if>\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.exception.BusinessException;\nimport com.yanggu.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameUnderline}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(=|!=|>|<|>=|<=)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport java.util.Objects;\n    </#if>\n</#if>\n\nimport static com.yanggu.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        //唯一性校验等\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        //唯一性校验等\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * 批量查询\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.eq(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.eq(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'!=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ne(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ne(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>\'>\n                <#if field.attrType == \'String\'>\n        wrapper.gt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.gt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ge(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ge(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<\'>\n                <#if field.attrType == \'String\'>\n        wrapper.lt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.lt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.le(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.le(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.like(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.like(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'left like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeLeft(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeLeft(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'right like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeRight(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeRight(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrders());\n        return wrapper;\n    }\n\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (149, 25, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameUnderline}.mapper;\n\nimport com.yanggu.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (150, 25, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'!=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#elseif field.queryType == \'left like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n        </if>\n            <#elseif field.queryType == \'right like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#else>\n            </#if>\n        </#list>\n    </sql>\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"query.orders != null and query.orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"query.orders\" item=\"order\" separator=\",\">\n                <#noparse>${order.column}</#noparse> <if test=\"order.isAsc\">ASC</if><if test=\"!order.isAsc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n</mapper>', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (151, 25, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameUnderline}.mapstruct;\n\nimport com.yanggu.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (152, 25, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.entity;\n\nimport lombok.Data;\n<#if baseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if baseClass??>\nimport ${baseClass.packageName}.${baseClass.code};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if baseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if baseClass??> extends ${baseClass.code}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (153, 25, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.dto;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (154, 25, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.yanggu.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO extends BaseVO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (155, 25, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (156, 25, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:31:34', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (157, 26, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'controller模板', 'package ${projectPackage}.${projectNameUnderline}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.validation.group.InsertGroup;\nimport com.yanggu.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}批量查询\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(order = 6)\n    @Operation(summary = \"${tableComment}批量查询\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (158, 26, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameUnderline}.service;\n\nimport com.yanggu.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 批量查询\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (159, 26, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'Service实现类模板', 'package ${projectPackage}.${projectNameUnderline}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(like|left like|right like)\") || field.attrType?matches(\"(String)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport org.dromara.hutool.core.text.StrUtil;\n    </#if>\n</#if>\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.exception.BusinessException;\nimport com.yanggu.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameUnderline}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(=|!=|>|<|>=|<=)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport java.util.Objects;\n    </#if>\n</#if>\n\nimport static com.yanggu.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        //唯一性校验等\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        //唯一性校验等\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * 批量查询\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.eq(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.eq(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'!=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ne(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ne(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>\'>\n                <#if field.attrType == \'String\'>\n        wrapper.gt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.gt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ge(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ge(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<\'>\n                <#if field.attrType == \'String\'>\n        wrapper.lt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.lt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.le(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.le(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.like(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.like(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'left like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeLeft(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeLeft(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'right like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeRight(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeRight(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrders());\n        return wrapper;\n    }\n\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (160, 26, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameUnderline}.mapper;\n\nimport com.yanggu.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (161, 26, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'!=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#elseif field.queryType == \'left like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n        </if>\n            <#elseif field.queryType == \'right like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#else>\n            </#if>\n        </#list>\n    </sql>\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"query.orders != null and query.orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"query.orders\" item=\"order\" separator=\",\">\n                <#noparse>${order.column}</#noparse> <if test=\"order.isAsc\">ASC</if><if test=\"!order.isAsc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n</mapper>', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (162, 26, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameUnderline}.mapstruct;\n\nimport com.yanggu.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (163, 26, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.entity;\n\nimport lombok.Data;\n<#if baseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if baseClass??>\nimport ${baseClass.packageName}.${baseClass.code};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if baseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if baseClass??> extends ${baseClass.code}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (164, 26, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.dto;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (165, 26, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.yanggu.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO extends BaseVO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (166, 26, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (167, 26, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:33:29', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (168, 27, 'java/Controller.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/controller/${classNameUpper}Controller.java', 'controller模板', 'package ${projectPackage}.${projectNameUnderline}.controller;\n\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.NotEmpty;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.validation.group.InsertGroup;\nimport com.yanggu.common.validation.group.UpdateGroup;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\n\n/**\n * ${tableComment}管理\n */\n@Validated\n@RestController\n@Tag(name = \"${tableComment}管理\")\n@RequestMapping(\"/${functionName}\")\npublic class ${classNameUpper}Controller {\n\n    @Autowired\n    private ${classNameUpper}Service ${className}Service;\n\n    /**\n     * 新增${tableComment}\n     */\n    @PostMapping(\"/add\")\n    @ApiOperationSupport(order = 1)\n    @Operation(summary = \"新增${tableComment}\")\n    public void add(@RequestBody @Validated(InsertGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.add(dto);\n    }\n\n    /**\n     * 修改${tableComment}\n     */\n    @PutMapping(\"/update\")\n    @ApiOperationSupport(order = 2)\n    @Operation(summary = \"修改${tableComment}\")\n    public void update(@RequestBody @Validated(UpdateGroup.class) ${classNameUpper}DTO dto) {\n        ${className}Service.update(dto);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除${tableComment}\n     *\n     * @param id ${tableComment}ID\n     */\n    @DeleteMapping(\"/delete\")\n    @ApiOperationSupport(order = 3)\n    @Operation(summary = \"删除${tableComment}\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public void delete(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        ${className}Service.delete(id);\n    }\n\n    /**\n     * 批量删除${tableComment}\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @DeleteMapping(\"/deleteList\")\n    @ApiOperationSupport(order = 4)\n    @Operation(summary = \"批量删除${tableComment}\")\n    public void deleteList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        ${className}Service.deleteList(idList);\n    }\n\n    /**\n     * ${tableComment}详情\n     *\n     * @param id ${tableComment}ID\n     */\n    @GetMapping(\"/detail\")\n    @ApiOperationSupport(order = 5)\n    @Operation(summary = \"${tableComment}详情\")\n    @Parameter(name = \"id\", description = \"${tableComment}ID\", required = true)\n    public ${classNameUpper}VO detail(@RequestParam(\"id\") @NotNull(message = \"${tableComment}ID不能为空\") ${primaryKeyType} id) {\n        return ${className}Service.detail(id);\n    }\n\n    /**\n     * ${tableComment}批量查询\n     *\n     * @param idList ${tableComment}ID列表\n     */\n    @PostMapping(\"/detailList\")\n    @ApiOperationSupport(order = 6)\n    @Operation(summary = \"${tableComment}批量查询\")\n    public List<${classNameUpper}VO> detailList(@RequestBody @NotEmpty(message = \"${tableComment}ID列表不能为空\") List<${primaryKeyType}> idList) {\n        return ${className}Service.detailList(idList);\n    }\n\n    /**\n     * ${tableComment}简单分页\n     */\n    @PostMapping(\"/entityPage\")\n    @ApiOperationSupport(order = 7)\n    @Operation(summary = \"${tableComment}简单分页\")\n    public PageVO<${classNameUpper}VO> entityPage(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityPage(query);\n    }\n\n    /**\n     * ${tableComment}简单列表\n     */\n    @PostMapping(\"/entityList\")\n    @ApiOperationSupport(order = 8)\n    @Operation(summary = \"${tableComment}简单列表\")\n    public List<${classNameUpper}VO> entityList(@RequestBody ${classNameUpper}EntityQuery query) {\n        return ${className}Service.entityList(query);\n    }\n\n    /**\n     * ${tableComment}复杂分页\n     */\n    @PostMapping(\"/voPage\")\n    @ApiOperationSupport(order = 9)\n    @Operation(summary = \"${tableComment}复杂分页\")\n    public PageVO<${classNameUpper}VO> voPage(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voPage(query);\n    }\n\n    /**\n     * ${tableComment}复杂列表\n     */\n    @PostMapping(\"/voList\")\n    @ApiOperationSupport(order = 10)\n    @Operation(summary = \"${tableComment}复杂列表\")\n    public List<${classNameUpper}VO> voList(@RequestBody ${classNameUpper}VOQuery query) {\n        return ${className}Service.voList(query);\n    }\n\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (169, 27, 'java/Service.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/${classNameUpper}Service.java', 'Service模板', 'package ${projectPackage}.${projectNameUnderline}.service;\n\nimport com.yanggu.common.domain.vo.PageVO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * ${tableComment}服务层\n */\npublic interface ${classNameUpper}Service extends IService<${classNameUpper}Entity> {\n\n    /**\n     * 新增\n     */\n    void add(${classNameUpper}DTO dto);\n\n    /**\n     * 修改\n     */\n    void update(${classNameUpper}DTO dto);\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    void delete(${primaryKeyType} id);\n\n    /**\n     * 批量删除\n     */\n    void deleteList(List<${primaryKeyType}> idList);\n\n    /**\n     * 详情\n     */\n    ${classNameUpper}VO detail(${primaryKeyType} id);\n\n    /**\n     * 批量查询\n     */\n    List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList);\n\n    /**\n     * 简单分页\n     */\n    PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query);\n\n    /**\n     * 简单列表\n     */\n    List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query);\n\n    /**\n     * 复杂分页\n     */\n    PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query);\n\n    /**\n     * 复杂列表\n     */\n    List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (170, 27, 'java/ServiceImpl.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/service/impl/${classNameUpper}ServiceImpl.java', 'Service实现类模板', 'package ${projectPackage}.${projectNameUnderline}.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(like|left like|right like)\") || field.attrType?matches(\"(String)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport org.dromara.hutool.core.text.StrUtil;\n    </#if>\n</#if>\nimport com.yanggu.common.domain.vo.PageVO;\nimport com.yanggu.common.exception.BusinessException;\nimport com.yanggu.common.mybatis.util.MybatisUtil;\nimport ${projectPackage}.${projectNameUnderline}.mapstruct.${classNameUpper}Mapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper;\nimport ${projectPackage}.${projectNameUnderline}.service.${classNameUpper}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n<#if queryList?has_content>\n    <#assign needStrUtil = false>\n    <#list queryList as field>\n        <#if field.queryType?matches(\"(=|!=|>|<|>=|<=)\")>\n            <#assign needStrUtil = true>\n        </#if>\n    </#list>\n    <#if needStrUtil>\nimport java.util.Objects;\n    </#if>\n</#if>\n\nimport static com.yanggu.common.response.ResultEnum.DATA_NOT_EXIST;\n\n/**\n * ${tableComment}Service实现类\n */\n@Service\npublic class ${classNameUpper}ServiceImpl extends ServiceImpl<${classNameUpper}Mapper, ${classNameUpper}Entity> implements ${classNameUpper}Service {\n\n    @Autowired\n    private ${classNameUpper}Mapper ${className}Mapper;\n\n    @Autowired\n    private ${classNameUpper}Mapstruct ${className}Mapstruct;\n\n    /**\n     * 新增\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void add(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity entity = ${className}Mapstruct.dtoToEntity(dto);\n        //唯一性校验等\n        ${className}Mapper.insert(entity);\n    }\n\n    /**\n     * 修改\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void update(${classNameUpper}DTO dto) {\n        ${classNameUpper}Entity formEntity = ${className}Mapstruct.dtoToEntity(dto);\n        ${classNameUpper}Entity dbEntity = selectById(dto.getId());\n        //唯一性校验等\n        ${className}Mapper.updateById(formEntity);\n    }\n<#function getPrimaryKeyType fieldList>\n    <#list fieldList as field>\n        <#if field.primaryPk>\n            <#return field.attrType>\n        </#if>\n    </#list>\n    <#return Long>\n</#function>\n<#assign primaryKeyType = getPrimaryKeyType(fieldList)>\n\n    /**\n     * 删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void delete(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        //删除校验和关联删除\n        ${className}Mapper.deleteById(id);\n    }\n\n    /**\n     * 批量删除\n     */\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteList(List<${primaryKeyType}> idList) {\n        //删除校验和关联删除\n        ${className}Mapper.deleteByIds(idList);\n    }\n\n    /**\n     * 详情\n     */\n    @Override\n    public ${classNameUpper}VO detail(${primaryKeyType} id) {\n        ${classNameUpper}Entity dbEntity = selectById(id);\n        return ${className}Mapstruct.entityToVO(dbEntity);\n    }\n\n    /**\n     * 简单分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> entityPage(${classNameUpper}EntityQuery query) {\n        //简单sql使用QueryWrapper\n        ${className}Mapper.selectPage(query, buildQueryWrapper(query));\n        //较复杂sql，使用xml\n        //${className}Mapper.entityPage(query);\n        return ${className}Mapstruct.entityToPageVO(query);\n    }\n\n    /**\n     * 简单列表\n     */\n    @Override\n    public List<${classNameUpper}VO> entityList(${classNameUpper}EntityQuery query) {\n        query.setPageSize(-1L);\n        //简单sql使用QueryWrapper\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectList(buildQueryWrapper(query));\n        //复杂sql，使用xml\n        //List<${classNameUpper}Entity> entityList = ${className}Mapper.entityList(query);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    /**\n     * 复杂分页\n     */\n    @Override\n    public PageVO<${classNameUpper}VO> voPage(${classNameUpper}VOQuery query) {\n        ${className}Mapper.voPage(query);\n        return ${className}Mapstruct.voToPageVO(query);\n    }\n\n    /**\n     * 复杂列表\n     */\n    @Override\n    public List<${classNameUpper}VO> voList(${classNameUpper}VOQuery query) {\n        //查询全部数据\n        query.setPageSize(-1L);\n        return ${className}Mapper.voList(query);\n    }\n\n    /**\n     * 批量查询\n     */\n    @Override\n    public List<${classNameUpper}VO> detailList(List<${primaryKeyType}> idList) {\n        List<${classNameUpper}Entity> entityList = ${className}Mapper.selectByIds(idList);\n        return ${className}Mapstruct.entityToVO(entityList);\n    }\n\n    private ${classNameUpper}Entity selectById(${primaryKeyType} id) {\n        ${classNameUpper}Entity entity = ${className}Mapper.selectById(id);\n        if (entity == null) {\n            throw new BusinessException(DATA_NOT_EXIST, \"${tableComment}\", id);\n        }\n        return entity;\n    }\n\n    private LambdaQueryWrapper<${classNameUpper}Entity> buildQueryWrapper(${classNameUpper}EntityQuery query) {\n        LambdaQueryWrapper<${classNameUpper}Entity> wrapper = Wrappers.lambdaQuery(${classNameUpper}Entity.class);\n        <#if queryList?has_content>\n\n        //过滤字段\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.eq(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.eq(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'!=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ne(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ne(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>\'>\n                <#if field.attrType == \'String\'>\n        wrapper.gt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.gt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'>=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.ge(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.ge(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<\'>\n                <#if field.attrType == \'String\'>\n        wrapper.lt(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.lt(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'<=\'>\n                <#if field.attrType == \'String\'>\n        wrapper.le(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.le(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.like(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.like(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'left like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeLeft(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeLeft(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            <#elseif field.queryType == \'right like\'>\n                <#if field.attrType == \'String\'>\n        wrapper.likeRight(StrUtil.isNotBlank(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                <#else>\n        wrapper.likeRight(Objects.nonNull(query.get${field.attrName?cap_first}()), ${classNameUpper}Entity::get${field.attrName?cap_first}, query.get${field.attrName?cap_first}());\n                </#if>\n            </#if>\n        </#list>\n        </#if>\n\n        //排序字段\n        MybatisUtil.orderBy(wrapper, query.getOrders());\n        return wrapper;\n    }\n\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (171, 27, 'java/Mapper.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapper/${classNameUpper}Mapper.java', 'Mapper模板', 'package ${projectPackage}.${projectNameUnderline}.mapper;\n\nimport com.yanggu.common.mybatis.mapper.BaseMapperPlus;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}EntityQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.query.${classNameUpper}VOQuery;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * ${tableComment}Mapper\n */\n@Mapper\n@Repository\npublic interface ${classNameUpper}Mapper extends BaseMapperPlus<${classNameUpper}Entity> {\n\n    /**\n     * Entity分页\n     */\n    IPage<${classNameUpper}Entity> entityPage(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * Entity列表\n     */\n    List<${classNameUpper}Entity> entityList(@Param(\"query\") ${classNameUpper}EntityQuery query);\n\n    /**\n     * VO分页\n     */\n    IPage<${classNameUpper}VO> voPage(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n    /**\n     * VO列表\n     */\n    List<${classNameUpper}VO> voList(@Param(\"query\") ${classNameUpper}VOQuery query);\n\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (172, 27, 'xml/Mapper.ftl', '${backendPath}/src/main/resources/mapper/${classNameUpper}Mapper.xml', 'Mapper的XML模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${projectPackage}.${projectNameUnderline}.mapper.${classNameUpper}Mapper\">\n\n    <!-- 所有字段 -->\n    <sql id=\"allColumns\">\n        <#list fieldList as field>\n        ${field.fieldName}<#if field_has_next>,</#if>\n        </#list>\n    </sql>\n\n    <!-- 过滤SQL -->\n    <sql id=\"whereSQL\">\n        <!-- 这里写过滤语句，过滤项需要加query前缀 -->\n        <#list queryList as field>\n            <#if field.queryType == \'=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} = <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'!=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} != <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'>=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &gt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt; <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'<=\'>\n        <if test=\"query.${field.attrName} != null<#if field.attrType == \'String\'> and query.${field.attrName}.trim() != \'\'</#if>\">\n            AND ${field.fieldName} &lt;= <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>\n        </if>\n            <#elseif field.queryType == \'like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#elseif field.queryType == \'left like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(\'%\', <#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>)\n        </if>\n            <#elseif field.queryType == \'right like\'>\n        <if test=\"query.${field.attrName} != null and query.${field.attrName}.trim() != \'\'\">\n            AND ${field.fieldName} LIKE CONCAT(<#noparse>#{query.</#noparse>${field.attrName}<#noparse>}</#noparse>, \'%\')\n        </if>\n            <#else>\n            </#if>\n        </#list>\n    </sql>\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"query.orders != null and query.orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"query.orders\" item=\"order\" separator=\",\">\n                <#noparse>${order.column}</#noparse> <if test=\"order.isAsc\">ASC</if><if test=\"!order.isAsc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- Entity类字段映射 -->\n    <resultMap type=\"${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity\" id=\"${className}Map\">\n        <#list fieldList as field>\n        <#if field.primaryPk>\n        <id property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        <#else>\n        <result property=\"${field.attrName}\" column=\"${field.fieldName}\"/>\n        </#if>\n        </#list>\n    </resultMap>\n<#function getLogicDeleteField fieldList >\n    <#list fieldList as field>\n        <#if field.logicDelete?? && field.logicDelete>\n            <#return field.fieldName + \" = \" + field.logicNotDeleteValue>\n        </#if>\n    </#list>\n    <#return \"\">\n</#function>\n<#assign logicDeleteFlex = getLogicDeleteField(fieldList)>\n\n    <!-- Entity分页 -->\n    <select id=\"entityPage\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- Entity列表 -->\n    <select id=\"entityList\" resultMap=\"${className}Map\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO分页 -->\n    <select id=\"voPage\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n    <!-- VO列表 -->\n    <select id=\"voList\" resultType=\"${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO\">\n        SELECT\n            <include refid=\"allColumns\"/>\n        FROM\n            ${databaseName}.${tableName}\n        <where>\n            <#if logicDeleteFlex != \'\'>\n            ${logicDeleteFlex}\n            </#if>\n            <include refid=\"whereSQL\"/>\n        </where>\n        <include refid=\"orderBySQL\"/>\n    </select>\n\n</mapper>', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (173, 27, 'java/Mapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/mapstruct/${classNameUpper}Mapstruct.java', 'Mapstruct模板', 'package ${projectPackage}.${projectNameUnderline}.mapstruct;\n\nimport com.yanggu.common.mapstruct.BaseMapstruct;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\nimport ${projectPackage}.${projectNameUnderline}.domain.dto.${classNameUpper}DTO;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Named;\n\nimport static org.mapstruct.MappingConstants.ComponentModel.SPRING;\n\n/**\n * ${tableComment}Mapstruct\n */\n@Named(\"${className}Mapstruct\")\n@Mapper(componentModel = SPRING, implementationName = \"${projectNamePascal}${classNameUpper}MapstructImpl\")\npublic interface ${classNameUpper}Mapstruct extends BaseMapstruct<${classNameUpper}Entity, ${classNameUpper}VO, ${classNameUpper}DTO> {\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (174, 27, 'java/Entity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/entity/${classNameUpper}Entity.java', 'Entity实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.entity;\n\nimport lombok.Data;\n<#if baseClass??>\nimport lombok.EqualsAndHashCode;\n<#else></#if>\nimport com.baomidou.mybatisplus.annotation.*;\n<#if baseClass??>\nimport ${baseClass.packageName}.${baseClass.code};\n</#if>\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity实体类\n */\n@Data\n@TableName(value = \"${tableName}\", schema = \"${databaseName}\")\n<#if baseClass??>\n@EqualsAndHashCode(callSuper = true)\n<#else></#if>\npublic class ${classNameUpper}Entity<#if baseClass??> extends ${baseClass.code}</#if> implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	</#if>\n	<#if field.primaryPk>\n	@TableId(value = \"${field.fieldName}\", type = IdType.AUTO)\n	<#else>\n		<#if field.autoFill == \"DEFAULT\">\n	@TableField(value = \"${field.fieldName}\")\n		</#if>\n		<#if field.autoFill == \"INSERT\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT)\n		</#if>\n		<#if field.autoFill == \"INSERT_UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.INSERT_UPDATE)\n		</#if>\n		<#if field.autoFill == \"UPDATE\">\n	@TableField(value = \"${field.fieldName}\", fill = FieldFill.UPDATE)\n		</#if>\n	</#if>\n	<#if field.logicDelete>\n	@TableLogic(value = \"${field.logicNotDeleteValue}\", delval = \"${field.logicDeleteValue}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (175, 27, 'java/DTO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/dto/${classNameUpper}DTO.java', 'DTO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.dto;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}DTO实体类\n */\n@Data\n@Schema(description = \"${tableComment}DTO实体类\")\npublic class ${classNameUpper}DTO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n</#if>\n</#list>\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (176, 27, 'java/VO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/vo/${classNameUpper}VO.java', 'VO实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.yanggu.common.domain.vo.BaseVO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VO extends BaseVO implements Serializable {\n\n	@Serial\n	private static final long serialVersionUID = 1L;\n\n<#list fieldList as field>\n	<#if !field.baseField>\n	<#if field.fieldComment!?length gt 0>\n	/**\n	 * ${field.fieldComment}\n	 */\n	@Schema(description = \"${field.fieldComment}\")\n	</#if>\n	<#if field.attrType == \'Date\'>\n	</#if>\n	private ${field.attrType} ${field.attrName};\n\n	</#if>\n</#list>\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (177, 27, 'java/EntityQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}EntityQuery.java', 'EntityQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.entity.${classNameUpper}Entity;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}Entity查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}Entity查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}EntityQuery extends PageQuery<${classNameUpper}Entity> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (178, 27, 'java/VOQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/domain/query/${classNameUpper}VOQuery.java', 'VOQuery查询实体类模板', 'package ${projectPackage}.${projectNameUnderline}.domain.query;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.yanggu.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameUnderline}.domain.vo.${classNameUpper}VO;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n<#list importList as i>\nimport ${i!};\n</#list>\n\n/**\n * ${tableComment}VO查询实体类\n */\n@Data\n@Schema(description = \"${tableComment}VO查询实体类\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${classNameUpper}VOQuery extends PageQuery<${classNameUpper}VO> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n<#list queryList as field>\n    <#if !field.baseField>\n    <#if field.fieldComment!?length gt 0>\n    /**\n     * ${field.fieldComment}\n     */\n    @Schema(description = \"${field.fieldComment}\")\n    </#if>\n    <#if field.attrType == \'Date\'>\n    </#if>\n    private ${field.attrType} ${field.attrName};\n\n    </#if>\n</#list>\n}', 0, '2025-05-14 09:33:58', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (179, 28, 'vue/api.ts.ftl', '${frontendPath}/src/api/${functionNameKebabCase}.ts', '后端接口api', 'import service from \'@/utils/request\'\n\n//提交表单\nexport const ${functionName}SubmitApi = (dataForm: any) => {\n    if (dataForm.id) {\n        //修改接口\n        return service.put(\'/${functionName}/update\', dataForm)\n    } else {\n        //新增接口\n        return service.post(\'/${functionName}/add\', dataForm)\n    }\n}\n\n//删除接口\nexport const ${functionName}DeleteApi = (id: number) => {\n    return service.delete(\'/${functionName}/delete?id=\' + id)\n}\n\n//批量删除\nexport const ${functionName}DeleteListApi = (idList: Array<number>) => {\n    return service.delete(\'/${functionName}/deleteList\', { data: idList })\n}\n\n//详情\nexport const ${functionName}DetailApi = (id: number) => {\n    return service.get(\'/${functionName}/detail?id=\' + id)\n}\n\n//详情列表\nexport const ${functionName}DetailListApi = (idList: Array<number>) => {\n    return service.post(\'/${functionName}/detailList\', idList)\n}\n\n//简单分页\nexport const ${functionName}EntityPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityPage\', queryForm)\n}\n\n//简单列表\nexport const ${functionName}EntityListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityList\', queryForm)\n}\n\n//复杂分页\nexport const ${functionName}VOPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voPage\', queryForm)\n}\n\n//复杂列表\nexport const ${functionName}VOListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voList\', queryForm)\n}\n', 0, '2025-05-14 17:55:56', '2025-07-03 14:20:23', 0);
INSERT INTO `gen_template` VALUES (180, 28, 'vue/add-or-update.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/add-or-update.vue', '新增或者修改页面', '<template>\n	<el-dialog v-model=\"visible\" :title=\"!dataForm.id ? \'新增\' : \'修改\'\" :close-on-click-modal=\"false\">\n		<el-form ref=\"dataFormRef\" :model=\"dataForm\" :rules=\"dataRules\" label-width=\"100px\" @keyup.enter=\"submitHandle()\">\n	    <#list formList as field>\n            <el-form-item label=\"${field.fieldComment!}\" prop=\"${field.attrName}\">\n			<#if field.formType == \'text\'>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			<#elseif field.formType == \'textarea\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'editor\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"dataForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment!}\">\n                    <el-option v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"dataForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"dataForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.formType == \'date\'>\n                <el-date-picker type=\"date\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#elseif field.formType == \'datetime\'>\n                <el-date-picker type=\"datetime\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n            <#elseif field.formType == \'number\'>\n                <el-input-number v-model=\"dataForm.${field.attrName}\" size=\"small\"></el-input-number>\n			<#else>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n            </el-form-item>\n	    </#list>\n		</el-form>\n		<template #footer>\n			<el-button @click=\"visible = false\">取消</el-button>\n			<el-button type=\"primary\" @click=\"submitHandle()\">确定</el-button>\n		</template>\n	</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, ref } from \'vue\'\nimport { ElMessage } from \'element-plus/es\'\nimport { ${functionName}DetailApi, ${functionName}SubmitApi } from \'@/api/${functionNameKebabCase}\'\n<#list formList as field>\n    <#if field.formType == \'select\' || field.formType == \'checkbox\' || field.formType == \'radio\'>\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n    </#if>\n</#list>\n\nconst emit = defineEmits([\'refreshDataList\'])\n\nconst visible = ref(false)\nconst dataFormRef = ref()\n\nconst dataForm = reactive({\n	<#list fieldList as field>\n	    <#if field.entityBaseField == 0>\n	${field.attrName}: \'\'<#sep>,\n	    </#if>\n	</#list>\n})\n\nconst dataRules = reactive({\n    <#list formList as field>\n        <#if field.formRequired == 1>\n    ${field.attrName}: [{ required: true, message: \'必填项不能为空\', trigger: \'blur\' }]<#if field_has_next>,</#if>\n        </#if>\n    </#list>\n})\n\nconst init = (id?: number) => {\n	visible.value = true\n	dataForm.id = null\n\n	// 重置表单数据\n	if (dataFormRef.value) {\n		dataFormRef.value.resetFields()\n	}\n\n	if (id) {\n		get${functionNamePascal}(id)\n	}\n}\n\nconst get${functionNamePascal} = (id: number) => {\n	${functionName}DetailApi(id).then(res => {\n		Object.assign(dataForm, res.data)\n	})\n}\n\n// 表单提交\nconst submitHandle = () => {\n	dataFormRef.value.validate((valid: boolean) => {\n		if (!valid) {\n			return false\n		}\n\n		${functionName}SubmitApi(dataForm).then(() => {\n			ElMessage.success({\n				message: \'操作成功\',\n				duration: 500,\n				onClose: () => {\n					visible.value = false\n					emit(\'refreshDataList\')\n				}\n			})\n		})\n	})\n}\n\ndefineExpose({\n	init\n})\n</script>\n', 0, '2025-05-14 17:55:56', '2025-07-03 14:21:17', 0);
INSERT INTO `gen_template` VALUES (181, 28, 'vue/index.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/index.vue', '列表页面', '<template>\n	<el-card class=\"layout-query\">\n		<el-form ref=\"queryRef\" :inline=\"true\" :model=\"state.queryForm\" @keyup.enter=\"getDataList()\">\n		<#list queryList as field>\n			<el-form-item label=\"${field.fieldComment}\" prop=\"${field.attrName}\">\n			<#if field.queryFormType == \'text\' || field.queryFormType == \'textarea\' || field.queryFormType == \'editor\'>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请输入${field.fieldComment}\"></el-input>\n			<#elseif field.queryFormType == \'select\'>\n                <el-select v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment}\">\n                    <el-option v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.queryFormType == \'radio\'>\n                <el-radio-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.queryFormType == \'checkbox\'>\n                <el-checkbox-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.queryFormType == \'date\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"daterange\"\n                        format=\"YYYY-MM-DD\"\n                        value-format=\"YYYY-MM-DD\"\n                        clearable\n                >\n                </el-date-picker>\n            <#elseif field.queryFormType == \'datetime\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"datetimerange\"\n                        format=\"YYYY-MM-DD HH:mm:ss\"\n                        value-format=\"YYYY-MM-DD HH:mm:ss\"\n                        clearable\n                >\n                </el-date-picker>\n			<#else>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n			</el-form-item>\n        </#list>\n			<el-form-item>\n				<el-button type=\"primary\" @click=\"getDataList()\">查询</el-button>\n			</el-form-item>\n			<el-form-item>\n				<el-button @click=\"resetQueryRef()\">重置</el-button>\n			</el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"addOrUpdateHandle()\">新增</el-button>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"danger\" @click=\"deleteBatchHandle()\">删除</el-button>\n            </el-form-item>\n		</el-form>\n	</el-card>\n\n	<el-card>\n		<el-table\n			v-loading=\"state.dataListLoading\"\n			:data=\"state.dataList\"\n			border\n			class=\"layout-table\"\n			@selection-change=\"selectionChangeHandle\"\n			@sort-change=\"sortChangeHandle\"\n		>\n			<el-table-column type=\"selection\" header-align=\"center\" align=\"center\" width=\"50\"></el-table-column>\n			<el-table-column type=\"index\" label=\"序号\" header-align=\"center\" align=\"center\" width=\"60\"></el-table-column>\n	    <#list gridList as field>\n			<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\" <#if field.queryFormType == \'select\' || field.queryFormType == \'radio\' || field.queryFormType == \'checkbox\'>:formatter=\"(_: any, __: any, value: any) => getLabel(value, ${field.enumNameAllUpper}_ENUM)\"</#if> <#if field.gridSort == 1>sortable=\"custom\"</#if></el-table-column>\n        </#list>\n			<el-table-column label=\"操作\" fixed=\"right\" header-align=\"center\" align=\"center\" width=\"150\">\n				<template #default=\"scope\">\n					<el-button type=\"primary\" link @click=\"addOrUpdateHandle(scope.row.id)\">修改</el-button>\n					<el-button type=\"primary\" link @click=\"deleteBatchHandle(scope.row.id)\">删除</el-button>\n				</template>\n			</el-table-column>\n		</el-table>\n		<el-pagination\n			:current-page=\"state.pageNum\"\n			:page-sizes=\"state.pageSizes\"\n			:page-size=\"state.pageSize\"\n			:total=\"state.total\"\n			layout=\"total, sizes, prev, pager, next, jumper\"\n			@size-change=\"sizeChangeHandle\"\n			@current-change=\"currentChangeHandle\"\n		>\n		</el-pagination>\n\n		<!-- 弹窗, 新增 / 修改 -->\n		<add-or-update ref=\"addOrUpdateRef\" @refresh-data-list=\"getDataList\"></add-or-update>\n	</el-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { useCrud } from \'@/hooks\'\nimport { reactive, ref } from \'vue\'\nimport { IHooksOptions } from \'@/hooks/interface\'\nimport AddOrUpdate from \'./add-or-update.vue\'\n<#list gridList as field>\n	<#if field.queryFormType == \'select\' || field.queryFormType == \'radio\' || field.queryFormType == \'checkbox\'>\nimport { getLabel } from \'@/utils/enum\'\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n	</#if>\n</#list>\nimport { ${functionName}EntityPageApi, ${functionName}DeleteListApi } from \'@/api/${functionNameKebabCase}\'\n\nconst state: IHooksOptions = reactive({\n    dataListApi: ${functionName}EntityPageApi,\n    deleteListApi: ${functionName}DeleteListApi,\n    queryForm: {\n        <#list queryList as field>\n        <#if field.queryFormType == \'date\'>\n        startDate: \'\',\n        endDate: \'\'<#sep>, </#sep>\n        <#elseif field.queryFormType == \'datetime\'>\n        startDateTime: \'\',\n        endDateTime: \'\'<#sep>, </#sep>\n        <#else>\n        ${field.attrName}: \'\'<#sep>, </#sep>\n        </#if>\n        </#list>\n    }\n})\n\nconst queryRef = ref()\nconst addOrUpdateRef = ref()\nconst addOrUpdateHandle = (id?: number) => {\n	addOrUpdateRef.value.init(id)\n}\nconst resetQueryRef = () => {\n  queryRef.value.resetFields()\n}\n\nconst { getDataList, selectionChangeHandle, sizeChangeHandle, currentChangeHandle, deleteBatchHandle, sortChangeHandle } = useCrud(state)\n</script>\n', 0, '2025-05-14 17:55:56', '2025-07-03 14:21:40', 0);
INSERT INTO `gen_template` VALUES (182, 29, 'pom.xml.ftl', '${backendPath}/pom.xml', 'pom文件模板', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>${projectPackage}</groupId>\n    <artifactId>${projectName}</artifactId>\n    <version>${projectVersion}</version>\n    <description>${projectDesc}</description>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>21</java.version>\n        <maven.compiler.source>21</maven.compiler.source>\n        <maven.compiler.target>21</maven.compiler.target>\n        <spring-boot.version>3.3.1</spring-boot.version>\n        <hutool.version>6.0.0-M20</hutool.version>\n        <lombok.version>1.18.36</lombok.version>\n        <mapstruct.version>1.6.3</mapstruct.version>\n        <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>\n        <mybatis-plus.version>3.5.10.1</mybatis-plus.version>\n        <knife4j-openapi3-jakarta.version>4.5.0</knife4j-openapi3-jakarta.version>\n    </properties>\n\n    <!-- 依赖版本管理 -->\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version><#noparse>${spring-boot.version}</#noparse></version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.projectlombok</groupId>\n                <artifactId>lombok</artifactId>\n                <version><#noparse>${lombok.version}</#noparse></version>\n            </dependency>\n            <dependency>\n                <groupId>org.dromara.hutool</groupId>\n                <artifactId>hutool-all</artifactId>\n                <version><#noparse>${hutool.version}</#noparse></version>\n            </dependency>\n            <!--对象转换-->\n            <dependency>\n                <groupId>org.mapstruct</groupId>\n                <artifactId>mapstruct</artifactId>\n                <version><#noparse>${mapstruct.version}</#noparse></version>\n            </dependency>\n            <dependency>\n                <groupId>org.mapstruct</groupId>\n                <artifactId>mapstruct-processor</artifactId>\n                <version><#noparse>${mapstruct.version}</#noparse></version>\n            </dependency>\n            <dependency>\n                <groupId>com.github.xiaoymin</groupId>\n                <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n                <version><#noparse>${knife4j-openapi3-jakarta.version}</#noparse></version>\n            </dependency>\n            <dependency>\n                <groupId>com.baomidou</groupId>\n                <artifactId>mybatis-plus-jsqlparser</artifactId>\n                <version><#noparse>${mybatis-plus.version}</#noparse></version>\n            </dependency>\n            <dependency>\n                <groupId>com.baomidou</groupId>\n                <artifactId>mybatis-plus-spring-boot3-starter</artifactId>\n                <version><#noparse>${mybatis-plus.version}</#noparse></version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.dromara.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>jakarta.validation</groupId>\n            <artifactId>jakarta.validation-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.mysql</groupId>\n            <artifactId>mysql-connector-j</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-jsqlparser</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct-processor</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <finalName><#noparse>${project.artifactId}</#noparse></finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version><#noparse>${spring-boot.version}</#noparse></version>\n                <executions>\n                    <execution>\n                        <id>repackage</id>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>', 0, '2025-05-14 17:56:37', '2025-07-02 10:58:55', 0);
INSERT INTO `gen_template` VALUES (183, 29, '.gitignore.ftl.ftl', '${backendPath}/.gitignore.ftl', 'gitignore配置文件', '!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**/target/\n!**/src/test/**/target/\n\n### IntelliJ IDEA ###\n.idea/**\n*.iws\n*.iml\n*.ipr\n\n### Eclipse ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### VS Code ###\n.vscode/\n\n### Mac OS ###\n.DS_Store\n\n.idea/**\n/**/target/**\n/**/logs/**\n/**/log/**', 0, '2025-05-14 17:56:37', '2025-06-05 10:25:23', 0);
INSERT INTO `gen_template` VALUES (184, 29, 'application.ftl', '${backendPath}/src/main/resources/application.yaml', 'springboot项目配置文件', 'server:\n  port: 8080\n  servlet:\n    context-path: /${projectName}\n\nspring:\n  # 项目名配置\n  application:\n    name: ${projectName}\n    version: \'${projectVersion}\'\n    description: \'${projectDesc}\'\n\n  main:\n    # 允许循环依赖\n    allow-circular-references: true\n\n  # 配置策略\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER\n\n  # jackson配置\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n\n  # 数据源配置\n  datasource:\n    driver-class-name: ${databaseDriverClassName}\n    url: ${databaseUrl}\n    username: ${databaseUsername}\n    password: ${databasePassword}\n\n# mybatis-plus配置\nmybatis-plus:\n  # mapper配置文件\n  mapper-locations: classpath*:mapper/**/*.xml\n  configuration:\n    # 日志配置\n    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl\n\nknife4j:\n  enable: true', 0, '2025-05-14 17:56:37', '2025-06-12 10:47:48', 0);
INSERT INTO `gen_template` VALUES (185, 29, 'Application.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/${projectNamePascal}Application.java', '主启动类', 'package ${projectPackage}.${projectNameDot};\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * ${projectNamePascal}主启动类\n */\n@MapperScan(\"${projectPackage}.${projectNameDot}.mapper\")\n@SpringBootApplication(scanBasePackages = \"${projectPackage}.${projectNameDot}.*\")\npublic class ${projectNamePascal}Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(${projectNamePascal}Application.class, args);\n    }\n\n}', 0, '2025-05-14 17:56:37', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (187, 29, 'CorsConfig.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/config/CorsConfig.java', '跨域配置类', 'package ${projectPackage}.${projectNameDot}.common.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * 跨域配置\n */\n@Configuration\npublic class CorsConfig {\n\n    @Bean\n    public CorsFilter corsFilter() {\n        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        final CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowCredentials(true);\n        corsConfiguration.addAllowedHeader(\"*\");\n        corsConfiguration.addAllowedOriginPattern(\"*\");\n        corsConfiguration.addAllowedMethod(\"*\");\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return new CorsFilter(source);\n    }\n\n}', 0, '2025-05-16 16:11:20', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (188, 29, 'Knife4jConfig.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/config/Knife4jConfig.java', 'Knife4j配置类', 'package ${projectPackage}.${projectNameDot}.common.config;\n\nimport com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Info;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/***\n * 创建Knife4j配置\n */\n@Configuration\n@EnableKnife4j\npublic class Knife4jConfig {\n\n    @Value(\"<#noparse>${spring.application.name:}</#noparse>\")\n    private String applicationName;\n\n    @Value(\"<#noparse>${spring.application.version:}</#noparse>\")\n    private String version;\n\n    @Value(\"<#noparse>${spring.application.description:}</#noparse>\")\n    private String description;\n\n    @Bean\n    public OpenAPI customOpenAPI() {\n        return new OpenAPI()\n                .info(new Info()\n                        .title(applicationName)\n                        .version(version)\n                        .description(description)\n                );\n    }\n\n}', 0, '2025-05-16 16:12:47', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (189, 29, 'BaseEntity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/entity/BaseEntity.java', 'Entity基类', 'package ${projectPackage}.${projectNameDot}.common.domain.entity;\n\n\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableLogic;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * 数据库实体基类\n * <p>包含创建时间、修改时间、删除标识三个字段</p>\n */\n@Data\npublic abstract class BaseEntity implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 4784400802803080438L;\n\n    /**\n     * 创建时间\n     */\n    @TableField(value = \"create_time\", fill = FieldFill.INSERT)\n    private Date createTime;\n\n    /**\n     * 修改时间\n     */\n    @TableField(value = \"update_time\", fill = FieldFill.INSERT_UPDATE)\n    private Date updateTime;\n\n    /**\n     * 是否删除（0未删除, 1删除）\n     */\n    @TableField(\"is_delete\")\n    @TableLogic(value = \"0\", delval = \"1\")\n    private Integer isDelete;\n\n}', 0, '2025-05-16 16:14:43', '2025-06-10 15:13:38', 0);
INSERT INTO `gen_template` VALUES (190, 29, 'BaseUserEntity.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/entity/BaseUserEntity.java', '', 'package ${projectPackage}.${projectNameDot}.common.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n\n/**\n * 数据库实体类基类，适用于用户操作的数据表、增删改查\n */\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic abstract class BaseUserEntity extends BaseEntity implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = -3534460034686573788L;\n\n    /**\n     * 创建人\n     */\n    @TableField(value = \"create_user_id\", fill = FieldFill.INSERT)\n    private Long createUserId;\n\n    /**\n     * 修改人\n     */\n    @TableField(value = \"update_user_id\", fill = FieldFill.INSERT_UPDATE)\n    private Long updateUserId;\n\n}\n', 0, '2025-05-16 16:16:05', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (191, 29, 'PageQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/query/PageQuery.java', '', 'package ${projectPackage}.${projectNameDot}.common.domain.query;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.core.metadata.OrderItem;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * 分页查询参数基类，分页查询入参和返回基类\n *\n * @param <T> 必须是Entity或者是VO\n */\n@Data\n@Schema(description = \"分页查询参数基类\")\npublic class PageQuery<T> implements IPage<T>, Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 2101820826443930585L;\n\n    /**\n     * 当前页码\n     */\n    @Schema(description = \"当前页码\", defaultValue = \"1\")\n    private Long pageNum = 1L;\n\n    /**\n     * 每页大小\n     */\n    @Schema(description = \"每页大小\", defaultValue = \"10\")\n    private Long pageSize = 10L;\n\n    /**\n     * 排序字段列表\n     */\n    @Schema(description = \"排序字段列表\")\n    private List<OrderItemQuery> orderItemList = OrderItemQuery.descs(\"updateTime\", \"id\");\n\n    /**\n     * 分页数据\n     */\n    @Schema(description = \"分页数据\", hidden = true)\n    private List<T> records;\n\n    /**\n     * 记录总数\n     */\n    @Schema(description = \"记录总数\", hidden = true)\n    private long total;\n\n    @Schema(hidden = true)\n    private Long size;\n\n    @Schema(hidden = true)\n    private Long current;\n\n    @Schema(hidden = true)\n    @Getter(AccessLevel.NONE)\n    @Setter(AccessLevel.NONE)\n    private Long pages;\n\n    @Override\n    public long getSize() {\n        return this.pageSize;\n    }\n\n    @Override\n    public IPage<T> setSize(long size) {\n        this.pageSize = size;\n        return this;\n    }\n\n    @Override\n    public long getCurrent() {\n        return pageNum;\n    }\n\n    @Override\n    public IPage<T> setCurrent(long current) {\n        this.pageSize = current;\n        return this;\n    }\n\n    @Override\n    public List<T> getRecords() {\n        return this.records;\n    }\n\n    @Override\n    public PageQuery<T> setRecords(List<T> records) {\n        this.records = records;\n        return this;\n    }\n\n    @Override\n    public long getTotal() {\n        return this.total;\n    }\n\n    @Override\n    public PageQuery<T> setTotal(long total) {\n        this.total = total;\n        return this;\n    }\n\n    @Override\n    public List<OrderItem> orders() {\n        //返回空数组，让框架不做排序处理\n        return List.of();\n    }\n\n}\n', 0, '2025-05-16 16:17:35', '2025-06-11 17:31:00', 0);
INSERT INTO `gen_template` VALUES (192, 29, 'BaseUserVO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/vo/BaseUserVO.java', '', 'package ${projectPackage}.${projectNameDot}.common.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Controller返回值数据基类（包含用户相关信息）\n * <p>自定义VO类继承该类即可</p>\n */\n@Data\n@Schema(description = \"数据VO基类（包含用户相关信息）\")\npublic abstract class BaseUserVO extends BaseVO implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = -5814569213714989166L;\n\n    /**\n     * 创建人ID\n     */\n    @Schema(description = \"创建人ID\")\n    private Long createUserId;\n\n    /**\n     * 创建人\n     */\n    @Schema(description = \"创建人\")\n    private String createUser;\n\n    /**\n     * 修改人ID\n     */\n    @Schema(description = \"修改人ID\")\n    private Long updateUserId;\n\n    /**\n     * 修改人\n     */\n    @Schema(description = \"修改人\")\n    private String updateUser;\n\n}', 0, '2025-05-16 16:21:17', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (193, 29, 'BaseVO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/vo/BaseVO.java', '', 'package ${projectPackage}.${projectNameDot}.common.domain.vo;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Controller返回值数据基类\n * <p>自定义VO类继承该类即可</p>\n */\n@Data\n@Schema(description = \"数据VO基类\")\npublic abstract class BaseVO implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = -5814569213714989166L;\n\n    /**\n     * 创建时间\n     */\n    @Schema(description = \"创建时间\")\n    private Date createTime;\n\n    /**\n     * 修改时间\n     */\n    @Schema(description = \"修改时间\")\n    private Date updateTime;\n\n    /**\n     * 是否删除（0正常, 1删除）\n     */\n    @Schema(description = \"是否删除（0正常, 1删除）\")\n    private Integer isDelete;\n\n}', 0, '2025-05-16 16:22:09', '2025-06-10 15:09:56', 0);
INSERT INTO `gen_template` VALUES (194, 29, 'PageVO.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/vo/PageVO.java', '', 'package ${projectPackage}.${projectNameDot}.common.domain.vo;\n\n\nimport ${projectPackage}.${projectNameDot}.common.domain.query.PageQuery;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * 分页数据封装\n *\n * @param <T> 必须是VO\n */\n@Data\n@NoArgsConstructor\n@Schema(description = \"分页数据封装\")\npublic class PageVO<T> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 3563028771440196184L;\n\n    /**\n     * 当前页码\n     */\n    @Schema(description = \"当前页码\")\n    private Long pageNum;\n\n    /**\n     * 每页显示条数\n     */\n    @Schema(description = \"每页显示条数\")\n    private Long pageSize;\n\n    /**\n     * 分页数据\n     */\n    @Schema(description = \"分页数据\")\n    private List<T> records;\n\n    /**\n     * 总记录数\n     */\n    @Schema(description = \"总记录数\")\n    private Long total;\n\n    /**\n     * 将其余VO分页数据转换成PageVO分页数据\n     */\n    public PageVO(PageQuery<T> pageQuery) {\n        this.pageNum = pageQuery.getPageNum();\n        this.pageSize = pageQuery.getPageSize();\n        this.records = pageQuery.getRecords();\n        this.total = pageQuery.getTotal();\n    }\n\n    /**\n     * 转成成分页数据通过全量参数\n     *\n     * @param records 已经分页后的list\n     */\n    public PageVO(Long pageNum, Long pageSize, Long total, List<T> records) {\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.total = total;\n        this.records = records;\n    }\n\n    /**\n     * 转换成分页数据，手动分页\n     *\n     * @param records 分页前的数据\n     */\n    public PageVO(Long pageNum, Long pageSize, List<T> records) {\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.total = (long) records.size();\n        this.records = records.stream()\n                .skip((pageNum - 1) * pageSize)\n                .limit(pageSize)\n                .toList();\n    }\n\n}\n', 0, '2025-05-16 16:23:22', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (195, 29, 'BusinessException.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/exception/BusinessException.java', '', 'package ${projectPackage}.${projectNameDot}.common.exception;\n\nimport ${projectPackage}.${projectNameDot}.common.response.IResultError;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport org.dromara.hutool.core.text.StrUtil;\n\nimport java.io.Serial;\n\n/**\n * 自定义业务异常\n */\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class BusinessException extends RuntimeException implements IException {\n\n    @Serial\n    private static final long serialVersionUID = -2779970368178204678L;\n\n    /**\n     * 错误码\n     */\n    private final Integer code;\n\n    /**\n     * 错误信息\n     */\n    private final String message;\n\n    public BusinessException(IResultError resultError, Object... objects) {\n        super(StrUtil.format(resultError.getMessage(), objects));\n        this.code = resultError.getCode();\n        this.message = StrUtil.format(resultError.getMessage(), objects);\n    }\n\n    public BusinessException(IResultError resultError, Throwable cause, Object... objects) {\n        super(StrUtil.format(resultError.getMessage(), objects), cause);\n        this.code = resultError.getCode();\n        this.message = StrUtil.format(resultError.getMessage(), objects);\n    }\n\n    public BusinessException(String msg, Object... objects) {\n        super(StrUtil.format(msg, objects));\n        this.code = 500;\n        this.message = StrUtil.format(msg, objects);\n    }\n\n    public BusinessException(Integer code, String msg, Object... objects) {\n        super(StrUtil.format(msg, objects));\n        this.code = code;\n        this.message = StrUtil.format(msg, objects);\n    }\n\n    public BusinessException(Integer code, String msg, Throwable cause, Object... objects) {\n        super(StrUtil.format(msg, objects), cause);\n        this.code = code;\n        this.message = StrUtil.format(msg, objects);\n    }\n\n}\n', 0, '2025-05-16 16:25:10', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (196, 29, 'GlobalExceptionHandler.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/exception/GlobalExceptionHandler.java', '', 'package ${projectPackage}.${projectNameDot}.common.exception;\n\nimport ${projectPackage}.${projectNameDot}.common.response.Result;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.validation.ConstraintViolation;\nimport jakarta.validation.ConstraintViolationException;\nimport jakarta.validation.ValidationException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.validation.BindException;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.*;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.multipart.MaxUploadSizeExceededException;\nimport org.springframework.web.servlet.resource.NoResourceFoundException;\n\nimport java.util.Set;\nimport java.util.StringJoiner;\n\nimport static ${projectPackage}.${projectNameDot}.common.response.Result.fail;\nimport static ${projectPackage}.${projectNameDot}.common.response.ResultEnum.*;\n\n/**\n * 通用异常处理\n */\n@Slf4j\n@RestControllerAdvice\n@ConditionalOnProperty(name = \"web.exception.enable\", havingValue = \"true\", matchIfMissing = true)\npublic class GlobalExceptionHandler {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    /**\n     * 获取业务异常\n     */\n    @ExceptionHandler(BusinessException.class)\n    public Result<Void> businessException(BusinessException exception,\n                                          HandlerMethod handlerMethod) {\n        log.error(\"业务处理不成功, 请求方式: {}, 请求uri: {}, 请求方法: {}, 异常code: {}, 异常message: {}\",\n                request.getMethod(), request.getRequestURI(), handlerMethod.getMethod().getName(), exception.getCode(), exception.getMessage(), exception);\n        return fail(exception);\n    }\n\n    /**\n     * 捕获异常\n     */\n    @ExceptionHandler(Exception.class)\n    public Result<Void> serverException(Exception exception) {\n        log.error(\"服务处理不成功, 请求方式: {}, 请求uri: {}, 异常message: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(INTERNAL_SERVER_ERROR);\n    }\n\n    /**\n     * 捕获运行时异常\n     */\n    @ExceptionHandler(RuntimeException.class)\n    public Result<Void> runtimeException(RuntimeException exception) {\n        log.error(\"服务处理不成功, 请求方式: {}, 请求uri: {}, 发生运行时异常, 异常message: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(INTERNAL_SERVER_ERROR);\n    }\n\n    /**\n     * 捕获字段校验异常\n     */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Result<Void> methodArgumentNotValidException(MethodArgumentNotValidException exception) {\n        StringJoiner stringJoiner = new StringJoiner(\";\");\n        exception.getBindingResult().getFieldErrors().forEach(fieldError -> stringJoiner.add(fieldError.getDefaultMessage()));\n        log.error(\"字段校验不通过, 请求方式: {}, 请求uri: {}, 字段校验异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), stringJoiner, exception);\n        return fail(PARAM_ERR);\n    }\n\n    /**\n     * 捕获参数校验异常\n     */\n    @ExceptionHandler(ValidationException.class)\n    public Result<Void> validationException(ValidationException exception) {\n        log.error(\"参数校验不通过, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(PARAM_ERR);\n    }\n\n    /**\n     * 捕获字段校验异常\n     */\n    @ExceptionHandler(ConstraintViolationException.class)\n    public Result<Void> constraintViolationException(ConstraintViolationException exception) {\n        Set<ConstraintViolation<?>> constraintViolations = exception.getConstraintViolations();\n        StringJoiner stringJoiner = new StringJoiner(\";\");\n        constraintViolations.forEach(temp -> stringJoiner.add(temp.getMessage()));\n        log.error(\"参数校验不通过, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), stringJoiner, exception);\n        return fail(PARAM_ERR);\n    }\n\n    /**\n     * 捕获参数绑定异常\n     */\n    @ExceptionHandler(BindException.class)\n    public Result<Void> bindException(BindException exception) {\n        StringJoiner stringJoiner = new StringJoiner(\";\");\n        exception.getBindingResult().getFieldErrors().forEach(fieldError -> stringJoiner.add(fieldError.getDefaultMessage()));\n        log.error(\"参数绑定不通过, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), stringJoiner, exception);\n        return fail(PARAM_ERR);\n    }\n\n    /**\n     * 捕获请求方式不支持异常\n     */\n    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\n    public Result<Void> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException exception) {\n        log.error(\"请求方法不支持, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(METHOD_NOT_ALLOWED);\n    }\n\n    /**\n     * 捕获cookie参数丢失\n     */\n    @ExceptionHandler(MissingRequestCookieException.class)\n    public Result<Void> handleMissingRequestCookieException(MissingRequestCookieException exception) {\n        log.error(\"请求cookie缺失, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(COOKIE_LOST);\n    }\n\n    /**\n     * 捕获缺失请求头异常\n     */\n    @ExceptionHandler(MissingRequestHeaderException.class)\n    public Result<Void> handleMissingRequestHeaderException(MissingRequestHeaderException exception) {\n        log.error(\"请求头缺失, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(HEADER_LOST);\n    }\n\n    /**\n     * 捕获路径参数丢失异常\n     */\n    @ExceptionHandler(MissingPathVariableException.class)\n    public Result<Void> handleMissingPathVariableException(MissingPathVariableException exception) {\n        log.error(\"路径参数缺失, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(PATH_LOST);\n    }\n\n    /**\n     * 捕获参数缺失异常\n     */\n    @ExceptionHandler(MissingServletRequestParameterException.class)\n    public Result<Void> handleMissingServletRequestParameterException(MissingServletRequestParameterException exception) {\n        log.error(\"请求参数缺失, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(PARAM_LOST);\n    }\n\n    /**\n     * 捕获文件太大异常\n     */\n    @ExceptionHandler(MaxUploadSizeExceededException.class)\n    public Result<Void> handleMaxUploadSizeExceededException(MaxUploadSizeExceededException exception) {\n        log.error(\"上传文件大小超出限制, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(FILE_TOO_LARGE);\n    }\n\n    /**\n     * 捕获资源不存在异常\n     */\n    @ExceptionHandler(NoResourceFoundException.class)\n    public Result<Void> noResourceFoundException(NoResourceFoundException exception) {\n        log.error(\"请求资源不存在, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(NOT_FOUND);\n    }\n\n    /**\n     * 捕获请求参数解析异常\n     */\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    public Result<Void> handleHttpMessageNotReadableException(HttpMessageNotReadableException exception) {\n        log.error(\"请求参数解析失败, 请求方式: {}, 请求uri: {}, 异常信息: {}\",\n                request.getMethod(), request.getRequestURI(), exception.getMessage(), exception);\n        return fail(REQUEST_ERR.getCode(), exception.getMessage());\n    }\n\n}\n', 0, '2025-05-16 16:26:18', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (197, 29, 'IException.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/exception/IException.java', '', 'package ${projectPackage}.${projectNameDot}.common.exception;\n\n/**\n * 异常信息接口，设置CODE和异常信息\n */\npublic interface IException {\n\n    /**\n     * 获取异常码\n     */\n    Integer getCode();\n\n    /**\n     * 获取异常信息\n     */\n    String getMessage();\n\n}\n', 0, '2025-05-16 16:27:15', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (198, 29, 'BaseMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/BaseMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\n/**\n * Mapstruct转换基类，提供Entity、VO、DTO之间基本的转换\n * <p>适用于Entity、VO、DTO都存在的情况</p>\n *\n * @param <E> entity实体类泛型（数据库实体类）\n * @param <V> vo实体类泛型（controller返回参数）\n * @param <D> dto实体类泛型（controller新增、修改请求参数）\n */\npublic interface BaseMapstruct<E, V, D> extends DTOToEntityMapstruct<D, E>, PageEntityMapstruct<E, V>, PageVOMapstruct<V> {\n}', 0, '2025-05-16 16:35:10', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (199, 29, 'BaseNoDTOMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/BaseNoDTOMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\n/**\n * Mapstruct转换基类，提供Entity和VO之间基本的转换\n * <p>适用于DTO不存在的情况，但是有分页的情况</p>\n * <p>例如系统日志表，它的数据是程序内部自己生成的，并不是外界传入</p>\n *\n * @param <E> entity实体类泛型（数据库实体类）\n * @param <V> vo实体类泛型（controller返回参数）\n */\npublic interface BaseNoDTOMapstruct<E, V> extends PageEntityMapstruct<E, V>, PageVOMapstruct<V> {\n}', 0, '2025-05-16 16:35:57', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (200, 29, 'BaseNoPageMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/BaseNoPageMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\n/**\n * Mapstruct转换基类，提供Entity、VO、DTO之间基本的转换\n * <p>适用于Entity、VO、DTO都存在的情况，但是不需要分页</p>\n * <p>例如系统内置字典表。可能就10条数据</p>\n *\n * @param <E> entity实体类泛型（数据库实体类）\n * @param <V> vo实体类泛型（controller返回参数）\n * @param <D> dto实体类泛型（controller新增、修改请求参数）\n */\npublic interface BaseNoPageMapstruct<E, V, D> extends DTOToEntityMapstruct<D, E>, EntityToVOMapstruct<E, V> {\n}', 0, '2025-05-16 16:36:46', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (201, 29, 'DTOToEntityMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/DTOToEntityMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport org.dromara.hutool.core.collection.CollUtil;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * 将DTO转换成Entity的通用接口\n *\n * @param <D> dto实体类泛型（controller新增、修改请求参数）\n * @param <E> entity实体类泛型（数据库实体类）\n */\npublic interface DTOToEntityMapstruct<D, E> {\n\n    /**\n     * 将DTO转换成Entity\n     */\n    E dtoToEntity(D dto);\n\n    /**\n     * 将DTO列表转换为Entity列表\n     */\n    default List<E> dtoToEntity(List<D> dtoList) {\n        if (CollUtil.isEmpty(dtoList)) {\n            return Collections.emptyList();\n        }\n        return dtoList.stream().map(this::dtoToEntity).toList();\n    }\n\n}', 0, '2025-05-16 16:37:38', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (202, 29, 'EntityToDTOMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/EntityToDTOMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport org.dromara.hutool.core.collection.CollUtil;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * 将Entity转换成DTO的通用接口\n *\n * @param <E> entity实体类泛型（数据库实体类）\n * @param <D> dto实体类泛型（controller新增、修改请求参数）\n */\npublic interface EntityToDTOMapstruct<E, D> {\n\n    /**\n     * 将Entity转换成DTO\n     */\n    D entityToDTO(E entity);\n\n    /**\n     * 将DTO列表转换为Entity列表\n     */\n    default List<D> entityToDTO(List<E> entityList) {\n        if (CollUtil.isEmpty(entityList)) {\n            return Collections.emptyList();\n        }\n        return entityList.stream().map(this::entityToDTO).toList();\n    }\n\n}', 0, '2025-05-16 16:38:36', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (203, 29, 'EntityToVOMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/EntityToVOMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport org.dromara.hutool.core.collection.CollUtil;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * 将Entity转换成VO的通用接口\n *\n * @param <E> entity实体类泛型（数据库实体类）\n * @param <V> vo实体类泛型（controller返回参数）\n */\npublic interface EntityToVOMapstruct<E, V> {\n\n    /**\n     * 将Entity转换成VO\n     */\n    V entityToVO(E entity);\n\n    /**\n     * 将Entity列表转换成VO列表\n     */\n    default List<V> entityToVO(List<E> entityList) {\n        if (CollUtil.isEmpty(entityList)) {\n            return Collections.emptyList();\n        }\n        return entityList.stream().map(this::entityToVO).toList();\n    }\n\n}', 0, '2025-05-16 16:39:19', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (204, 29, 'PageEntityMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/PageEntityMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport ${projectPackage}.${projectNameDot}.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.PageVO;\n\nimport java.util.List;\n\n/**\n * 将Entity分页数据转换为VO分页数据的通用接口\n *\n * @param <E> entity实体类泛型（数据库实体类）\n * @param <V> vo实体类泛型（controller返回参数）\n */\npublic interface PageEntityMapstruct<E, V> extends EntityToVOMapstruct<E, V> {\n\n    /**\n     * 将Entity分页数据转换为VO分页数据\n     */\n    default PageVO<V> entityToPageVO(PageQuery<E> entityPageQuery) {\n        Long pageNum = entityPageQuery.getPageNum();\n        Long pageSize = entityPageQuery.getPageSize();\n        long total = entityPageQuery.getTotal();\n        List<V> voList = this.entityToVO(entityPageQuery.getRecords());\n        return new PageVO<>(pageNum, pageSize, total, voList);\n    }\n\n}', 0, '2025-05-16 16:39:59', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (205, 29, 'PageVOMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/PageVOMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport ${projectPackage}.${projectNameDot}.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.PageVO;\n\n/**\n * 将VO分页数据转换为VO分页数据的通用接口\n *\n * @param <V> vo实体类泛型（controller返回参数）\n */\npublic interface PageVOMapstruct<V> extends PageVOOtherMapstruct {\n\n    /**\n     * 将VO分页数据转换成PageVO分页数据\n     */\n    default PageVO<V> voToPageVO(PageQuery<V> voPageQuery) {\n        return toPageVO(voPageQuery);\n    }\n\n}', 0, '2025-05-16 16:40:45', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (206, 29, 'PageVOOtherMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/PageVOOtherMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport ${projectPackage}.${projectNameDot}.common.domain.query.PageQuery;\nimport ${projectPackage}.${projectNameDot}.common.domain.vo.PageVO;\n\nimport java.util.List;\n\n/**\n * 其余情况下的分页数据转换\n */\npublic interface PageVOOtherMapstruct {\n\n    /**\n     * 将其余VO分页数据转换成PageVO分页数据\n     *\n     * @param <T> 其余VO对象\n     */\n    default <T> PageVO<T> toPageVO(PageQuery<T> voPageQuery) {\n        return new PageVO<>(voPageQuery);\n    }\n\n    /**\n     * 转成成分页数据通过全量参数\n     *\n     * @param records 已经分页后的list\n     */\n    default <T> PageVO<T> toPageVOWithFullParams(Long pageNum, Long pageSize, Long total, List<T> records) {\n        return new PageVO<>(pageNum, pageSize, total, records);\n    }\n\n    /**\n     * 转换成分页数据，手动分页\n     *\n     * @param records 分页前的数据\n     */\n    default <T> PageVO<T> toPageVOWithPagination(Long pageNum, Long pageSize, List<T> records) {\n        return new PageVO<>(pageNum, pageSize, records);\n    }\n\n}', 0, '2025-05-16 16:41:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (207, 29, 'VOToEntityMapstruct.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mapstruct/VOToEntityMapstruct.java', '', 'package ${projectPackage}.${projectNameDot}.common.mapstruct;\n\nimport org.dromara.hutool.core.collection.CollUtil;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * 将VO转换成Entity的通用接口\n *\n * @param <V> vo实体类泛型（controller返回参数）\n * @param <E> entity实体类泛型（数据库实体类）\n */\npublic interface VOToEntityMapstruct<V, E> {\n\n    /**\n     * 将VO转换成Entity\n     */\n    E voToEntity(V vo);\n\n    /**\n     * 将Entity列表转换成VO列表\n     */\n    default List<E> voToEntity(List<V> voList) {\n        if (CollUtil.isEmpty(voList)) {\n            return Collections.emptyList();\n        }\n        return voList.stream().map(this::voToEntity).toList();\n    }\n\n}', 0, '2025-05-16 16:42:18', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (208, 29, 'CommonMetaObjectHandler.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mybatis/config/CommonMetaObjectHandler.java', '', 'package ${projectPackage}.${projectNameDot}.common.mybatis.config;\n\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport org.apache.ibatis.reflection.MetaObject;\n\nimport java.util.Date;\n\n/**\n * 填充公共字段\n */\npublic class CommonMetaObjectHandler implements MetaObjectHandler {\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        //插入的时候设置添加和修改时间的值\n        this.setFieldValByName(\"createTime\", new Date(), metaObject);\n        this.setFieldValByName(\"updateTime\", new Date(), metaObject);\n        this.setFieldValByName(\"isDelete\", false, metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        //更新的时候设置修改时间的值\n        this.setFieldValByName(\"updateTime\", new Date(), metaObject);\n    }\n\n}\n', 0, '2025-05-16 16:44:04', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (209, 29, 'MybatisPlusConfig.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mybatis/config/MybatisPlusConfig.java', '', 'package ${projectPackage}.${projectNameDot}.common.mybatis.config;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * mybatis-plus配置类\n */\n@Configuration\npublic class MybatisPlusConfig {\n\n    /**\n     * 添加分页插件\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        //如果配置多个插件, 切记分页最后添加\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n\n    /**\n     * 自动填充部分数据（createTime、updateTime、isDelete）\n     */\n    @Bean\n    public MetaObjectHandler metaObjectHandler() {\n        return new CommonMetaObjectHandler();\n    }\n\n}\n', 0, '2025-05-16 16:45:02', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (210, 29, 'BaseMapperPlus.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mybatis/mapper/BaseMapperPlus.java', '', 'package ${projectPackage}.${projectNameDot}.common.mybatis.mapper;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.baomidou.mybatisplus.extension.toolkit.Db;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * 自定义Mapper接口, 实现自定义扩展\n *\n * @param <T> Entity泛型\n */\npublic interface BaseMapperPlus<T> extends BaseMapper<T> {\n\n    /**\n     * 使用默认的查询条件查询并返回结果列表\n     *\n     * @return 返回查询结果的列表\n     */\n    default List<T> selectList() {\n        return this.selectList(new QueryWrapper<>());\n    }\n\n    /**\n     * 批量插入实体对象集合\n     *\n     * @param entityList 实体对象集合\n     * @return 插入操作是否成功的布尔值\n     */\n    default boolean insertBatch(Collection<T> entityList) {\n        return Db.saveBatch(entityList);\n    }\n\n    /**\n     * 批量插入实体对象集合并指定批处理大小\n     *\n     * @param entityList 实体对象集合\n     * @param batchSize  批处理大小\n     * @return 插入操作是否成功的布尔值\n     */\n    default boolean insertBatch(Collection<T> entityList, int batchSize) {\n        return Db.saveBatch(entityList, batchSize);\n    }\n\n    /**\n     * 批量根据ID更新实体对象集合\n     *\n     * @param entityList 实体对象集合\n     * @return 更新操作是否成功的布尔值\n     */\n    default boolean updateBatchById(Collection<T> entityList) {\n        return Db.updateBatchById(entityList);\n    }\n\n    /**\n     * 批量根据ID更新实体对象集合并指定批处理大小\n     *\n     * @param entityList 实体对象集合\n     * @param batchSize  批处理大小\n     * @return 更新操作是否成功的布尔值\n     */\n    default boolean updateBatchById(Collection<T> entityList, int batchSize) {\n        return Db.updateBatchById(entityList, batchSize);\n    }\n\n    /**\n     * 批量插入或更新实体对象集合\n     *\n     * @param entityList 实体对象集合\n     * @return 插入或更新操作是否成功的布尔值\n     */\n    default boolean insertOrUpdateBatch(Collection<T> entityList) {\n        return Db.saveOrUpdateBatch(entityList);\n    }\n\n    /**\n     * 批量插入或更新实体对象集合并指定批处理大小\n     *\n     * @param entityList 实体对象集合\n     * @param batchSize  批处理大小\n     * @return 插入或更新操作是否成功的布尔值\n     */\n    default boolean insertOrUpdateBatch(Collection<T> entityList, int batchSize) {\n        return Db.saveOrUpdateBatch(entityList, batchSize);\n    }\n\n}', 0, '2025-05-16 16:46:08', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (211, 29, 'MybatisUtil.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/mybatis/util/MybatisUtil.java', '', 'package ${projectPackage}.${projectNameDot}.common.mybatis.util;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.support.SFunction;\nimport ${projectPackage}.${projectNameDot}.common.domain.query.OrderItemQuery;\nimport org.dromara.hutool.core.bean.BeanUtil;\nimport org.dromara.hutool.core.collection.CollUtil;\nimport org.dromara.hutool.core.func.LambdaFactory;\nimport org.dromara.hutool.core.reflect.FieldUtil;\nimport org.dromara.hutool.core.reflect.method.MethodInvoker;\nimport org.dromara.hutool.core.text.NamingCase;\nimport org.dromara.hutool.core.text.StrUtil;\nimport org.dromara.hutool.core.util.ObjUtil;\n\nimport java.util.List;\n\n/**\n * mybatis工具类\n */\npublic class MybatisUtil {\n\n    /**\n     * 设置排序字段\n     */\n    public static <T> void orderBy(LambdaQueryWrapper<T> wrapper, List<OrderItemQuery> orderItemList) {\n        if (CollUtil.isEmpty(orderItemList)) {\n            return;\n        }\n        Class<T> entityClass = wrapper.getEntityClass();\n        if (entityClass == null) {\n            throw new IllegalArgumentException(\"entityClass is null\");\n        }\n        orderItemList.forEach(orderItem -> {\n            SFunction<T, ?> column = buildGetter(entityClass, orderItem.getColumn());\n            if (orderItem.getAsc()) {\n                wrapper.orderByAsc(column);\n            } else {\n                wrapper.orderByDesc(column);\n            }\n        });\n    }\n\n    /**\n     * 获取getter方法的lambda表达式\n     */\n    public static <T> SFunction<T, ?> buildGetter(Class<T> clazz, String column) {\n        if (StrUtil.isBlank(column)) {\n            throw new IllegalArgumentException(\"column is blank\");\n        }\n        //获取字段对应的getter方法\n        MethodInvoker getter = (MethodInvoker) BeanUtil.getBeanDesc(clazz).getGetter(column);\n        if (getter == null) {\n            throw new IllegalArgumentException(StrUtil.format(\"column: {} is not exist\", column));\n        }\n        return LambdaFactory.build(SFunction.class, getter.getMethod());\n    }\n\n    /**\n     * 判断对象不为空\n     */\n    public static boolean isNotEmpty(Object object) {\n        if (object instanceof CharSequence) {\n            object = StrUtil.trim((CharSequence) object);\n        }\n\n        return ObjUtil.isNotEmpty(object);\n    }\n\n    /**\n     * 判断对象中某个字段不为空\n     */\n    public static boolean isNotEmpty(Object object, String propertyName) {\n        if (object == null) {\n            return false;\n        }\n        boolean hasField = FieldUtil.hasField(object.getClass(), propertyName);\n        if (!hasField) {\n            return false;\n        }\n        Object fieldValue = FieldUtil.getFieldValue(object, propertyName);\n\n        return isNotEmpty(fieldValue);\n    }\n\n    /**\n     * 小驼峰转下划线\n     */\n    public static String toUnderlineCase(String str) {\n        return NamingCase.toUnderlineCase(str);\n    }\n\n}\n', 0, '2025-05-16 16:47:01', '2025-06-11 11:12:34', 0);
INSERT INTO `gen_template` VALUES (212, 29, 'IgnoreResult.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/response/IgnoreResult.java', '', 'package ${projectPackage}.${projectNameDot}.common.response;\n\nimport java.lang.annotation.*;\n\n/**\n * 方法加上这个注解代表无需自动封装 {@link Result} 返回值\n */\n@Documented\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface IgnoreResult {\n}', 0, '2025-05-16 16:48:12', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (213, 29, 'IResultError.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/response/IResultError.java', '', 'package ${projectPackage}.${projectNameDot}.common.response;\n\n/**\n * 自定义枚举继承该接口\n */\npublic interface IResultError {\n\n    /**\n     * 错误码\n     */\n    Integer getCode();\n\n    /**\n     * 错误信息\n     */\n    String getMessage();\n\n}\n', 0, '2025-05-16 16:48:57', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (214, 29, 'Result.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/response/Result.java', '', 'package ${projectPackage}.${projectNameDot}.common.response;\n\nimport ${projectPackage}.${projectNameDot}.common.exception.BusinessException;\nimport ${projectPackage}.${projectNameDot}.common.exception.IException;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\n\nimport static ${projectPackage}.${projectNameDot}.common.response.ResultEnum.INTERNAL_SERVER_ERROR;\nimport static ${projectPackage}.${projectNameDot}.common.response.ResultEnum.SUCCESS;\n\n/**\n * 统一返回的响应封装结果\n */\n@Data\npublic class Result<T> implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 3782047511903624813L;\n\n    /**\n     * 返回状态码\n     */\n    private Integer code;\n\n    /**\n     * 返回信息\n     */\n    private String message;\n\n    /**\n     * 返回的数据\n     */\n    private T data;\n\n    /**\n     * 无参\n     */\n    public static <T> Result<T> success() {\n        Result<T> result = new Result<>();\n        result.setCode(SUCCESS.getCode());\n        result.setMessage(SUCCESS.getMessage());\n        return result;\n    }\n\n    /**\n     * 一个参数\n     */\n    public static <T> Result<T> success(T data) {\n        Result<T> result = success();\n        result.setData(data);\n        return result;\n    }\n\n    /**\n     * 两个参数\n     *\n     * @param message\n     * @param data\n     * @param <T>\n     * @return\n     */\n    public static <T> Result<T> success(String message, T data) {\n        Result<T> result = success(data);\n        result.setMessage(message);\n        return result;\n    }\n\n    /**\n     * 服务稳定-两个参数\n     *\n     * @param code\n     * @param message\n     * @param <T>\n     * @return\n     */\n    public static <T> Result<T> build(Integer code, String message) {\n        Result<T> result = new Result<>();\n        result.setCode(code);\n        result.setMessage(message);\n        return result;\n    }\n\n    /**\n     * 三个参数\n     *\n     * @param code\n     * @param message\n     * @param data\n     * @param <T>\n     * @return\n     */\n    public static <T> Result<T> build(Integer code, String message, T data) {\n        Result<T> result = build(code, message);\n        result.setData(data);\n        return result;\n    }\n\n\n    /**\n     * 服务异常时的响应 -无参\n     */\n    public static <T> Result<T> fail() {\n        Result<T> result = new Result<>();\n        result.setCode(INTERNAL_SERVER_ERROR.getCode());\n        result.setMessage(INTERNAL_SERVER_ERROR.getMessage());\n        return result;\n    }\n\n    /**\n     * 服务异常时的响应 -一个参数\n     */\n    public static <T> Result<T> fail(T data) {\n        Result<T> result = fail();\n        result.setData(data);\n        return result;\n    }\n\n    /**\n     * 服务异常时的响应 -两个参数\n     */\n    public static <T> Result<T> fail(String message, T data) {\n        Result<T> result = fail(data);\n        result.setMessage(message);\n        return result;\n    }\n\n    /**\n     * 异常信息处理\n     */\n    public static <T> Result<T> fail(String message) {\n        Result<T> result = fail();\n        result.setMessage(message);\n        return result;\n    }\n\n    /**\n     * 服务异常时的响应 -两个参数\n     */\n    public static <T> Result<T> fail(Integer code, String message) {\n        Result<T> result = fail();\n        result.setCode(code);\n        result.setMessage(message);\n        return result;\n    }\n\n    /**\n     * 返回异常\n     */\n    public static <T> Result<T> fail(BusinessException businessException) {\n        return fail(businessException.getCode(), businessException.getMessage());\n    }\n\n    /**\n     * 返回异常\n     */\n    public static <T> Result<T> fail(IException exception) {\n        Result<T> result = new Result<>();\n        result.setCode(exception.getCode());\n        result.setMessage(exception.getMessage());\n        return result;\n    }\n\n    /**\n     * 返回异常枚举\n     */\n    public static <T> Result<T> fail(IResultError error) {\n        return fail(error.getCode(), error.getMessage());\n    }\n\n    /**\n     * 服务异常时的响应 -三个参数\n     */\n    public static <T> Result<T> fail(Integer code, String message, T data) {\n        Result<T> result = fail(message, data);\n        result.setCode(code);\n        return result;\n    }\n\n}\n', 0, '2025-05-16 16:49:43', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (215, 29, 'ResultAdvice.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/response/ResultAdvice.java', '', 'package ${projectPackage}.${projectNameDot}.common.response;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.SneakyThrows;\nimport org.dromara.hutool.core.collection.CollUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\n/**\n * 对RestController返回值统一处理\n */\n@RestControllerAdvice(annotations = RestController.class)\n@ConditionalOnProperty(name = \"web.response.enable\", havingValue = \"true\", matchIfMissing = true)\npublic class ResultAdvice implements ResponseBodyAdvice<Object> {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    /**\n     * 不需要增强的类名，有默认值，主要是swagger等的类\n     */\n    @Value(\"<#noparse>#{\'${web.response.exclude-list:swagger,springfox,springdoc}\'.split(\',\')}</#noparse>\")\n    private List<String> excludeNameList;\n\n    @Override\n    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n        //类上或者方法上有IgnoreResult注解的，不增强\n        if (returnType.getDeclaringClass().isAnnotationPresent(IgnoreResult.class)\n                || returnType.getDeclaringClass().isAnnotationPresent(IgnoreResult.class)) {\n            return false;\n        }\n        boolean result = AnnotationUtils.findAnnotation(returnType.getAnnotatedElement(), IgnoreResult.class) == null;\n        if (!result) {\n            return false;\n        }\n        Method method = returnType.getMethod();\n        //如果类名包含swagger等，不处理\n        if (method != null && CollUtil.isNotEmpty(excludeNameList)) {\n            String name = method.getDeclaringClass().getName();\n            for (String excludeName : excludeNameList) {\n                if (name.contains(excludeName)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    @Override\n    @SneakyThrows\n    public Object beforeBodyWrite(Object body,\n                                  MethodParameter returnType,\n                                  MediaType selectedContentType,\n                                  Class<? extends HttpMessageConverter<?>> selectedConverterType,\n                                  ServerHttpRequest request,\n                                  ServerHttpResponse response) {\n        //如果返回类型已经是Result则直接返回，否则需要用Result进行返回值包装\n        if (body instanceof Result) {\n            return body;\n        } else if (body instanceof byte[]) {\n            return body;\n        } else {\n            Result<Object> result = Result.success(body);\n            //如果返回值是字符串, 需要特殊处理, 手动变成JSON字符串\n            if (returnType.getParameterType().equals(String.class)) {\n                return objectMapper.writeValueAsString(result);\n            }\n            return result;\n        }\n    }\n\n}\n', 0, '2025-05-16 16:50:24', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (216, 29, 'ResultEnum.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/response/ResultEnum.java', '', 'package ${projectPackage}.${projectNameDot}.common.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * 响应结果枚举\n */\n@Getter\n@AllArgsConstructor\npublic enum ResultEnum implements IResultError {\n\n    /**\n     * 请求成功\n     */\n    SUCCESS(200, \"success\"),\n\n    /**\n     * 请求参数错误\n     */\n    PARAM_ERR(300, \"request param error\"),\n\n    /**\n     * 请求参数丢失\n     */\n    PARAM_LOST(301, \"request param lost\"),\n\n    /**\n     * 请求头参数丢失\n     */\n    HEADER_LOST(302, \"request header lost\"),\n\n    /**\n     * 路径参数丢失\n     */\n    PATH_LOST(303, \"request path lost\"),\n\n    /**\n     * cookie值丢失\n     */\n    COOKIE_LOST(304, \"request cookie lost\"),\n\n    /**\n     * 客户端错误\n     */\n    REQUEST_ERR(400, \"request error\"),\n\n    /**\n     * 资源不存在\n     */\n    NOT_FOUND(404, \"not found\"),\n\n    /**\n     * 请求方法不支持\n     */\n    METHOD_NOT_ALLOWED(405, \"this method is not supported\"),\n\n    /**\n     * 服务器错误\n     */\n    INTERNAL_SERVER_ERROR(500, \"internal server error\"),\n\n    /**\n     * 文件太大\n     */\n    FILE_TOO_LARGE(501, \"file too large\"),\n\n    /**\n     * 数据不存在\n     */\n    DATA_NOT_EXIST(1000, \"{}数据ID: {}不存在\"),\n\n    /**\n     * 数据已经存在\n     */\n    DATA_ALREADY_EXIST(1001, \"{}数据ID: {}已存在\"),\n\n    /**\n     * 数据不能为空\n     */\n    DATA_NOT_NULL(1002, \"数据不能为空\"),\n    ;\n\n    /**\n     * 请求结果状态码\n     */\n    private final Integer code;\n\n    /**\n     * 请求结果描述信息\n     */\n    private final String message;\n\n}\n', 0, '2025-05-16 16:51:03', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (217, 29, 'DeleteGroup.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/group/DeleteGroup.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.group;\n\nimport jakarta.validation.groups.Default;\n\n/**\n * 表单校验删除分组\n * <p>默认包含Default</p>\n */\npublic interface DeleteGroup extends Default {\n}\n', 0, '2025-05-16 16:52:30', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (218, 29, 'InsertGroup.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/group/InsertGroup.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.group;\n\nimport jakarta.validation.groups.Default;\n\n/**\n * 表单校验新增分组\n * <p>默认包含Default</p>\n */\npublic interface InsertGroup extends Default {\n}\n', 0, '2025-05-16 16:53:12', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (219, 29, 'QueryGroup.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/group/QueryGroup.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.group;\n\nimport jakarta.validation.groups.Default;\n\n/**\n * 表单校验查询分组\n * <p>默认包含Default</p>\n */\npublic interface QueryGroup extends Default {\n}\n', 0, '2025-05-16 16:54:13', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (220, 29, 'UpdateGroup.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/group/UpdateGroup.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.group;\n\nimport jakarta.validation.groups.Default;\n\n/**\n * 表单校验修改分组\n * <p>默认包含Default</p>\n */\npublic interface UpdateGroup extends Default {\n}\n', 0, '2025-05-16 16:54:54', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (221, 31, 'Enum.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/enums/${enumNamePascal}Enum.java', 'java枚举模板', 'package ${projectPackage}.${projectNameDot}.enums;\n\nimport com.baomidou.mybatisplus.annotation.EnumValue;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n\n/**\n * ${enumDesc}枚举\n */\n@Getter\n@AllArgsConstructor\npublic enum ${enumNamePascal}Enum {\n\n    <#list enumItemList as item >\n    /**\n     * ${item.enumItemDesc}\n     */\n    ${item.enumItemNameAllUpper}(${item.enumItemCode}, \"${item.enumItemDesc}\"),\n    <#if item_has_next>\n\n    </#if>\n    </#list>\n    ;\n\n    /**\n     * code值\n     */\n    @JsonValue\n    @EnumValue\n    private final Integer code;\n\n    /**\n     * 描述\n     */\n    private final String description;\n\n}\n', 0, '2025-05-19 14:09:42', '2025-05-20 11:11:47', 0);
INSERT INTO `gen_template` VALUES (222, 32, 'enum.ftl', '${frontendPath}/src/enums/${enumName}-enum.ts.ftl', '枚举目录', 'import { EnumItem } from \'@/utils/enum\'\n\n//${enumDesc}枚举\nconst ${enumNameAllUpper}_ENUM: EnumItem[] = [\n<#list enumItemList as item >\n    {  label: \'${item.enumItemDesc}\', value: \'${item.enumItemCode}\' }<#if item_has_next>,</#if>\n</#list>\n]\n', 0, '2025-05-20 10:23:49', '2025-06-18 10:28:16', 0);
INSERT INTO `gen_template` VALUES (223, 29, 'logback-spring.ftl', '${backendPath}/src/main/resources/logback-spring.xml', 'logback文件日志配置', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n    <!-- 服务名称 -->\n    <springProperty name=\"APP_NAME\" source=\"spring.application.name\" defaultValue=\"app\" />\n    <!-- 日志格式 -->\n    <springProperty name=\"LOG_PATTERN\" source=\"logging.pattern.console\" defaultValue=\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36}:%line - %msg%n\" />\n    <!-- 指定日志输出路径 -->\n    <springProperty name=\"LOG_PATH\" source=\"logging.file.path\" defaultValue=\"./logs\" />\n    <!-- 日志文件最大大小 -->\n    <springProperty name=\"MAX_FILE_SIZE\" source=\"logging.max-file-size\" defaultValue=\"200MB\" />\n    <!-- 日志保留天数 -->\n    <springProperty name=\"MAX_HISTORY\" source=\"logging.max-history\" defaultValue=\"30\" />\n\n    <!-- 输出到控制台 -->\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern><#noparse>${LOG_PATTERN}</#noparse></Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n\n    <!-- 所有日志级别 -->\n    <appender name=\"ALL_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 正在记录的日志文档的路径及文档名 -->\n        <file><#noparse>${LOG_PATH}/${APP_NAME}-all.log</#noparse></file>\n        <!--日志文档输出格式-->\n        <encoder>\n            <pattern><#noparse>${LOG_PATTERN}</#noparse></pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern><#noparse>${LOG_PATH}/${APP_NAME}-all-%d{yyyy-MM-dd}-%i.log.gz</#noparse></fileNamePattern>\n            <maxFileSize><#noparse>${MAX_FILE_SIZE}</#noparse></maxFileSize>\n            <maxHistory><#noparse>${MAX_HISTORY}</#noparse></maxHistory>\n        </rollingPolicy>\n    </appender>\n\n    <!-- DEBUG日志级别 -->\n    <appender name=\"DEBUG_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <!-- 正在记录的日志文档的路径及文档名 -->\n        <file><#noparse>${LOG_PATH}/${APP_NAME}-debug.log</#noparse></file>\n        <!--日志文档输出格式-->\n        <encoder>\n            <pattern><#noparse>${LOG_PATTERN}</#noparse></pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern><#noparse>${LOG_PATH}/${APP_NAME}-debug-%d{yyyy-MM-dd}-%i.log.gz</#noparse></fileNamePattern>\n            <maxFileSize><#noparse>${MAX_FILE_SIZE}</#noparse></maxFileSize>\n            <maxHistory><#noparse>${MAX_HISTORY}</#noparse></maxHistory>\n        </rollingPolicy>\n        <!-- 此日志文档只记录debug级别的 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>DEBUG</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <!-- INFO日志级别 -->\n    <appender name=\"INFO_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file><#noparse>${LOG_PATH}/${APP_NAME}-info.log</#noparse></file>\n        <encoder>\n            <pattern><#noparse>${LOG_PATTERN}</#noparse></pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern><#noparse>${LOG_PATH}/${APP_NAME}-info-%d{yyyy-MM-dd}-%i.log.gz</#noparse></fileNamePattern>\n            <maxFileSize><#noparse>${MAX_FILE_SIZE}</#noparse></maxFileSize>\n            <maxHistory><#noparse>${MAX_HISTORY}</#noparse></maxHistory>\n        </rollingPolicy>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <!-- WARN日志级别 -->\n    <appender name=\"WARN_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file><#noparse>${LOG_PATH}/${APP_NAME}-warn.log</#noparse></file>\n        <encoder>\n            <pattern><#noparse>${LOG_PATTERN}</#noparse></pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern><#noparse>${LOG_PATH}/${APP_NAME}-warn-%d{yyyy-MM-dd}-%i.log.gz</#noparse></fileNamePattern>\n            <maxFileSize><#noparse>${MAX_FILE_SIZE}</#noparse></maxFileSize>\n            <maxHistory><#noparse>${MAX_HISTORY}</#noparse></maxHistory>\n        </rollingPolicy>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>WARN</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <!-- ERROR日志级别 -->\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file><#noparse>${LOG_PATH}/${APP_NAME}-error.log</#noparse></file>\n        <encoder>\n            <pattern><#noparse>${LOG_PATTERN}</#noparse></pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern><#noparse>${LOG_PATH}/${APP_NAME}-error-%d{yyyy-MM-dd}-%i.log.gz</#noparse></fileNamePattern>\n            <maxFileSize><#noparse>${MAX_FILE_SIZE}</#noparse></maxFileSize>\n            <maxHistory><#noparse>${MAX_HISTORY}</#noparse></maxHistory>\n        </rollingPolicy>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <!-- mapper接口日志配置 -->\n    <logger name=\"${projectPackage}.${projectNameDot}.mapper\" level=\"DEBUG\" />\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"DEBUG_FILE\" />\n        <appender-ref ref=\"ERROR_FILE\" />\n        <appender-ref ref=\"WARN_FILE\" />\n        <appender-ref ref=\"INFO_FILE\" />\n        <appender-ref ref=\"ALL_FILE\" />\n    </root>\n\n</configuration>', 0, '2025-06-05 11:12:12', '2025-07-02 10:59:01', 0);
INSERT INTO `gen_template` VALUES (224, 29, 'OrderItemQuery.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/domain/query/OrderItemQuery.java', '', 'package ${projectPackage}.${projectNameDot}.common.domain.query;\n\nimport com.baomidou.mybatisplus.core.toolkit.StringUtils;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport lombok.Data;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * 排序字段查询参数\n */\n@Data\n@Schema(description = \"排序字段查询参数\")\npublic class OrderItemQuery implements Serializable {\n\n    @Serial\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 需要进行排序的字段\n     */\n    @Schema(description = \"需要进行排序的字段\")\n    private String column;\n\n    /**\n     * 是否正序排列，默认 true\n     */\n    @Schema(description = \"是否正序排列，默认 true\")\n    private Boolean asc = true;\n\n    public static OrderItemQuery asc(String column) {\n        return build(column, true);\n    }\n\n    public static OrderItemQuery desc(String column) {\n        return build(column, false);\n    }\n\n    public static List<OrderItemQuery> ascs(String... columns) {\n        return Arrays.stream(columns).map(OrderItemQuery::asc).collect(Collectors.toList());\n    }\n\n    public static List<OrderItemQuery> descs(String... columns) {\n        return Arrays.stream(columns).map(OrderItemQuery::desc).collect(Collectors.toList());\n    }\n\n    private static OrderItemQuery build(String column, boolean asc) {\n        return new OrderItemQuery().setColumn(column).setAsc(asc);\n    }\n\n    public OrderItemQuery setColumn(String column) {\n        this.column = StringUtils.replaceAllBlank(column);\n        return this;\n    }\n\n    public OrderItemQuery setAsc(boolean asc) {\n        this.asc = asc;\n        return this;\n    }\n\n}\n', 0, '2025-06-10 10:42:05', '2025-06-11 11:11:58', 0);
INSERT INTO `gen_template` VALUES (225, 29, 'BaseMapperPlus.xml.ftl', '${backendPath}/src/main/resources/mapper/BaseMapperPlus.xml', '', '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${projectPackage}.${projectNameDot}.common.mybatis.mapper.BaseMapperPlus\">\n\n    <!-- 排序SQL -->\n    <sql id=\"orderBySQL\">\n        <if test=\"@${projectPackage}.${projectNameDot}.common.mybatis.util.MybatisUtil@isNotEmpty(query, \'orderItemList\')\">\n            ORDER BY\n            <foreach collection=\"query.orderItemList\" item=\"order\" separator=\",\">\n                <#noparse>${@</#noparse>${projectPackage}.${projectNameDot}.common.mybatis.util.MybatisUtil@toUnderlineCase(order.column)} <if test=\"order.asc\">ASC</if><if test=\"!order.asc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n    <!-- 排序SQL（带前缀） -->\n    <sql id=\"prefixOrderBySQL\">\n        <if test=\"@${projectPackage}.${projectNameDot}.common.mybatis.util.MybatisUtil@isNotEmpty(query, \'orderItemList\')\">\n            ORDER BY\n            <foreach collection=\"query.orderItemList\" item=\"order\" separator=\",\">\n                <#noparse>${columnPrefix}.${@</#noparse>${projectPackage}.${projectNameDot}.common.mybatis.util.MybatisUtil@toUnderlineCase(order.column)} <if test=\"order.asc\">ASC</if><if test=\"!order.asc\">DESC</if>\n            </foreach>\n        </if>\n    </sql>\n\n</mapper>\n', 0, '2025-06-10 11:05:57', '2025-06-20 16:20:16', 0);
INSERT INTO `gen_template` VALUES (226, 29, 'AbstractEnumCodeValidator.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/code/AbstractEnumCodeValidator.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.code;\n\nimport jakarta.validation.ConstraintValidator;\nimport jakarta.validation.ConstraintValidatorContext;\nimport lombok.SneakyThrows;\nimport org.dromara.hutool.core.array.ArrayUtil;\nimport org.dromara.hutool.core.convert.ConvertUtil;\nimport org.dromara.hutool.core.reflect.FieldUtil;\nimport org.dromara.hutool.core.util.EnumUtil;\n\nimport java.lang.reflect.Field;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Objects;\n\npublic abstract class AbstractEnumCodeValidator<T> implements ConstraintValidator<EnumCode, T> {\n\n    protected String enumName;\n\n    protected String enumFieldName;\n\n    protected List<?> values;\n\n    @Override\n    @SneakyThrows\n    public void initialize(EnumCode annotation) {\n        Class<? extends Enum<?>> value = annotation.value();\n        this.enumName = value.getName();\n        this.enumFieldName = annotation.fieldName();\n        if (!FieldUtil.hasField(value, this.enumFieldName)) {\n            throw new IllegalArgumentException(\"枚举属性名称: \" + enumName + \", 枚举属性名称: \" + enumFieldName + \" 不存在\");\n        }\n        List<Object> fieldValues = EnumUtil.getFieldValues(value, this.enumFieldName);\n        String[] valueList = annotation.valueList();\n        if (ArrayUtil.isNotEmpty(valueList)) {\n            Field declaredField = value.getDeclaredField(this.enumFieldName);\n            List<?> list = ConvertUtil.toList(declaredField.getType(), valueList);\n            //判断是否包含所有值\n            if (new HashSet<>(fieldValues).containsAll(list)) {\n                this.values = list;\n            } else {\n                throw new IllegalArgumentException(\"枚举属性名称: \" + enumName + \", 属性名称: \" + enumFieldName + \", 值: \"\n                        + list + \" 不在枚举属性值范围内: \" + fieldValues);\n            }\n        } else {\n            this.values = fieldValues;\n        }\n    }\n\n    /**\n     * 子类实现校验逻辑\n     */\n    public abstract boolean isValid(T value);\n\n    @Override\n    public boolean isValid(T value, ConstraintValidatorContext context) {\n        //进行校验\n        boolean valid = isValid(value);\n        //如果校验不通过，则设置错误提示语句\n        if (!valid) {\n            setMessageTemplate(value, context);\n        }\n        return valid;\n    }\n\n    protected void setMessageTemplate(Object value, ConstraintValidatorContext context) {\n        //校验不通过，自定义提示语句\n        context.disableDefaultConstraintViolation();\n        //禁用默认的message 的值\n        String messageTemplate = context.getDefaultConstraintMessageTemplate()\n                //重新添加错误提示语句\n                .replace(\"{enumName}\", enumName)\n                .replace(\"{enumFieldName}\", enumFieldName)\n                .replace(\"{enumValue}\", Objects.toString(value))\n                .replace(\"{valueList}\", values.toString());\n        context.buildConstraintViolationWithTemplate(messageTemplate)\n                .addConstraintViolation();\n    }\n\n}\n', 0, '2025-06-12 10:10:04', '2025-06-12 10:10:04', 0);
INSERT INTO `gen_template` VALUES (227, 29, 'EnumCode.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/code/EnumCode.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.code;\n\n\nimport jakarta.validation.Constraint;\nimport jakarta.validation.Payload;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport static java.lang.annotation.ElementType.*;\n\n/**\n * 枚举校验注解。字段的值需要在枚举的指定字段的指定值范围内\n */\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})\n@Constraint(validatedBy = {EnumCodeValidator.class, EnumCodeCollectionValidator.class})\npublic @interface EnumCode {\n\n    /**\n     * 需要校验的枚举类型\n     */\n    Class<? extends Enum<?>> value();\n\n    /**\n     * 枚举类型校验值字段名称\n     */\n    String fieldName() default \"code\";\n\n    /**\n     * 枚举类型校验值列表。为空代表全部\n     */\n    String[] valueList() default {};\n\n    /**\n     * 异常信息，支持{enumName}、{enumFieldName}、{enumValue}和{valueList}占位替换\n     */\n    String message() default \"枚举属性名称: {enumName}.{enumFieldName}, 传入的枚举属性枚举值: {enumValue}, 必须在指定范围: {valueList}\";\n\n    Class<?>[] groups() default {};\n\n    Class<? extends Payload>[] payload() default {};\n\n}\n', 0, '2025-06-12 10:10:35', '2025-06-12 10:10:35', 0);
INSERT INTO `gen_template` VALUES (228, 29, 'EnumCodeCollectionValidator.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/code/EnumCodeCollectionValidator.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.code;\n\n\nimport org.dromara.hutool.core.collection.CollUtil;\n\nimport java.util.Collection;\n\npublic class EnumCodeCollectionValidator extends AbstractEnumCodeValidator<Collection<?>> {\n\n    @Override\n    public boolean isValid(Collection<?> value) {\n        return CollUtil.containsAll(values, value);\n    }\n\n}\n', 0, '2025-06-12 10:11:02', '2025-06-12 10:11:02', 0);
INSERT INTO `gen_template` VALUES (229, 29, 'EnumCodeValidator.ftl', '${backendPath}/src/main/java/${projectPackageSlash}/${projectNameSlash}/common/validation/code/EnumCodeValidator.java', '', 'package ${projectPackage}.${projectNameDot}.common.validation.code;\n\npublic class EnumCodeValidator extends AbstractEnumCodeValidator<Object> {\n\n    @Override\n    public boolean isValid(Object value) {\n        //为空时，默认不校验，即认为通过\n        if (value == null) {\n            return true;\n        }\n        for (Object item : values) {\n            if (item.equals(value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n', 0, '2025-06-12 10:11:27', '2025-06-12 10:11:27', 0);
INSERT INTO `gen_template` VALUES (230, 33, 'vue/api.ts.ftl', '${frontendPath}/src/api/${functionName}.ts', '后端接口api', 'import service from \'@/utils/request\'\n\n//提交表单\nexport const ${functionName}SubmitApi = (dataForm: any) => {\n    if (dataForm.id) {\n        //修改接口\n        return service.put(\'/${functionName}/update\', dataForm)\n    } else {\n        //新增接口\n        return service.post(\'/${functionName}/add\', dataForm)\n    }\n}\n\n//删除接口\nexport const ${functionName}DeleteApi = (id: number) => {\n    return service.delete(\'/${functionName}/delete?id=\' + id)\n}\n\n//批量删除\nexport const ${functionName}DeleteListApi = (idList: Array<number>) => {\n    return service.delete(\'/${functionName}/deleteList\', { data: idList })\n}\n\n//详情\nexport const ${functionName}DetailApi = (id: number) => {\n    return service.get(\'/${functionName}/detail?id=\' + id)\n}\n\n//详情列表\nexport const ${functionName}DetailListApi = (idList: Array<number>) => {\n    return service.post(\'/${functionName}/detailList\', idList)\n}\n\n//简单分页\nexport const ${functionName}EntityPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityPage\', queryForm)\n}\n\n//简单列表\nexport const ${functionName}EntityListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityList\', queryForm)\n}\n\n//复杂分页\nexport const ${functionName}VOPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voPage\', queryForm)\n}\n\n//复杂列表\nexport const ${functionName}VOListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voList\', queryForm)\n}', 0, '2025-06-16 15:24:15', '2025-06-16 15:24:15', 0);
INSERT INTO `gen_template` VALUES (231, 33, 'vue/add-or-update.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/add-or-update.vue', '新增或者修改页面', '<template>\n	<el-dialog v-model=\"visible\" :title=\"!dataForm.id ? \'新增\' : \'修改\'\" :close-on-click-modal=\"false\">\n		<el-form ref=\"dataFormRef\" :model=\"dataForm\" :rules=\"dataRules\" label-width=\"100px\" @keyup.enter=\"submitHandle()\">\n	    <#list formList as field>\n            <el-form-item label=\"${field.fieldComment!}\" prop=\"${field.attrName}\">\n			<#if field.formType == \'text\'>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			<#elseif field.formType == \'textarea\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'editor\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"dataForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment!}\">\n                    <el-option v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"dataForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"dataForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.formType == \'date\'>\n                <el-date-picker type=\"date\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#elseif field.formType == \'datetime\'>\n                <el-date-picker type=\"datetime\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#else>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n            </el-form-item>\n	    </#list>\n		</el-form>\n		<template #footer>\n			<el-button @click=\"visible = false\">取消</el-button>\n			<el-button type=\"primary\" @click=\"submitHandle()\">确定</el-button>\n		</template>\n	</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, ref } from \'vue\'\nimport { ElMessage } from \'element-plus/es\'\nimport { ${functionName}DetailApi, ${functionName}SubmitApi } from \'@/api/${functionName}\'\n<#list formList as field>\n    <#if field.formType == \'select\' || field.formType == \'checkbox\' || field.formType == \'radio\'>\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n    </#if>\n</#list>\n\nconst emit = defineEmits([\'refreshDataList\'])\n\nconst visible = ref(false)\nconst dataFormRef = ref()\n\nconst dataForm = reactive({\n	<#list fieldList as field>\n	    <#if field.baseField == 0>\n	${field.attrName}: \'\'<#sep>,\n	    </#if>\n	</#list>\n})\n\nconst init = (id?: number) => {\n	visible.value = true\n	dataForm.id = null\n\n	// 重置表单数据\n	if (dataFormRef.value) {\n		dataFormRef.value.resetFields()\n	}\n\n	if (id) {\n		get${functionNamePascal}(id)\n	}\n}\n\nconst get${functionNamePascal} = (id: number) => {\n	${functionName}DetailApi(id).then(res => {\n		Object.assign(dataForm, res.data)\n	})\n}\n\nconst dataRules = ref({\n	<#list formList as field>\n	<#if field.formRequired == 1>\n	${field.attrName}: [{ required: true, message: \'必填项不能为空\', trigger: \'blur\' }]<#sep>,\n	</#if>\n	</#list>\n})\n\n// 表单提交\nconst submitHandle = () => {\n	dataFormRef.value.validate((valid: boolean) => {\n		if (!valid) {\n			return false\n		}\n\n		${functionName}SubmitApi(dataForm).then(() => {\n			ElMessage.success({\n				message: \'操作成功\',\n				duration: 500,\n				onClose: () => {\n					visible.value = false\n					emit(\'refreshDataList\')\n				}\n			})\n		})\n	})\n}\n\ndefineExpose({\n	init\n})\n</script>\n', 0, '2025-06-16 15:24:15', '2025-06-16 15:24:15', 0);
INSERT INTO `gen_template` VALUES (232, 33, 'vue/index.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/index.vue', '列表页面', '<template>\n	<el-card class=\"layout-query\">\n		<el-form ref=\"queryRef\" :inline=\"true\" :model=\"state.queryForm\" @keyup.enter=\"getDataList()\">\n		<#list queryList as field>\n			<el-form-item prop=\"${field.attrName}\">\n			<#if field.queryFormType == \'text\' || field.queryFormType == \'textarea\' || field.queryFormType == \'editor\'>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请输入${field.fieldComment}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment}\">\n                    <el-option v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.queryFormType == \'date\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"daterange\"\n                        format=\"YYYY-MM-DD\"\n                        value-format=\"YYYY-MM-DD\"\n                        clearable\n                >\n                </el-date-picker>\n            <#elseif field.queryFormType == \'datetime\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"datetimerange\"\n                        format=\"YYYY-MM-DD HH:mm:ss\"\n                        value-format=\"YYYY-MM-DD HH:mm:ss\"\n                        clearable\n                >\n                </el-date-picker>\n			<#else>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n			</el-form-item>\n        </#list>\n			<el-form-item>\n				<el-button type=\"primary\" @click=\"getDataList()\">查询</el-button>\n			</el-form-item>\n			<el-form-item>\n				<el-button @click=\"resetQueryRef()\">重置</el-button>\n			</el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"addOrUpdateHandle()\">新增</el-button>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"danger\" @click=\"deleteBatchHandle()\">删除</el-button>\n            </el-form-item>\n		</el-form>\n	</el-card>\n\n	<el-card>\n		<el-table v-loading=\"state.dataListLoading\" :data=\"state.dataList\" border class=\"layout-table\" @selection-change=\"selectionChangeHandle\">\n			<el-table-column type=\"selection\" header-align=\"center\" align=\"center\" width=\"50\"></el-table-column>\n			<el-table-column type=\"index\" label=\"序号\" header-align=\"center\" align=\"center\" width=\"60\"></el-table-column>\n	    <#list gridList as field>\n		  <#if field.formType == \'select\' || field.formType == \'radio\' || field.formType == \'checkbox\'>\n        	<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\" :formatter=\"(_: any, __: any, value: any) => getLabel(value, ${field.enumNameAllUpper}_ENUM)\"></el-table-column>\n		  <#else>\n			<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\"></el-table-column>\n		  </#if>\n        </#list>\n			<el-table-column label=\"操作\" fixed=\"right\" header-align=\"center\" align=\"center\" width=\"150\">\n				<template #default=\"scope\">\n					<el-button type=\"primary\" link @click=\"addOrUpdateHandle(scope.row.id)\">修改</el-button>\n					<el-button type=\"primary\" link @click=\"deleteBatchHandle(scope.row.id)\">删除</el-button>\n				</template>\n			</el-table-column>\n		</el-table>\n		<el-pagination\n			:current-page=\"state.pageNum\"\n			:page-sizes=\"state.pageSizes\"\n			:page-size=\"state.pageSize\"\n			:total=\"state.total\"\n			layout=\"total, sizes, prev, pager, next, jumper\"\n			@size-change=\"sizeChangeHandle\"\n			@current-change=\"currentChangeHandle\"\n		>\n		</el-pagination>\n\n		<!-- 弹窗, 新增 / 修改 -->\n		<add-or-update ref=\"addOrUpdateRef\" @refresh-data-list=\"getDataList\"></add-or-update>\n	</el-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { useCrud } from \'@/hooks\'\nimport { reactive, ref } from \'vue\'\nimport { IHooksOptions } from \'@/hooks/interface\'\nimport AddOrUpdate from \'./add-or-update.vue\'\n<#list gridList as field>\n	<#if field.formType == \'select\' || field.formType == \'radio\' || field.formType == \'checkbox\'>\nimport { getLabel } from \'@/utils/enum\'\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n	</#if>\n</#list>\n\nconst state: IHooksOptions = reactive({\n    dataListUrl: \'/${functionName}/entityPage\',\n    deleteUrl: \'/${functionName}/deleteList\',\n    queryForm: {\n        <#list queryList as field>\n        <#if field.formType == \'date\'>\n        startDate: \'\',\n        endDate: \'\'<#sep>, </#sep>\n        <#elseif field.formType == \'datetime\'>\n        startDateTime: \'\',\n        endDateTime: \'\'<#sep>, </#sep>\n        <#else>\n        ${field.attrName}: \'\'<#sep>, </#sep>\n        </#if>\n        </#list>\n    }\n})\n\nconst queryRef = ref()\nconst addOrUpdateRef = ref()\nconst addOrUpdateHandle = (id: number) => {\n	addOrUpdateRef.value.init(id)\n}\nconst resetQueryRef = () => {\n  queryRef.value.resetFields()\n}\n\nconst { getDataList, selectionChangeHandle, sizeChangeHandle, currentChangeHandle, deleteBatchHandle } = useCrud(state)\n</script>\n', 0, '2025-06-16 15:24:15', '2025-06-16 15:24:15', 0);
INSERT INTO `gen_template` VALUES (233, 34, 'vue/api.ts.ftl', '${frontendPath}/src/api/${functionName}.ts', '后端接口api', 'import service from \'@/utils/request\'\n\n//提交表单\nexport const ${functionName}SubmitApi = (dataForm: any) => {\n    if (dataForm.id) {\n        //修改接口\n        return service.put(\'/${functionName}/update\', dataForm)\n    } else {\n        //新增接口\n        return service.post(\'/${functionName}/add\', dataForm)\n    }\n}\n\n//删除接口\nexport const ${functionName}DeleteApi = (id: number) => {\n    return service.delete(\'/${functionName}/delete?id=\' + id)\n}\n\n//批量删除\nexport const ${functionName}DeleteListApi = (idList: Array<number>) => {\n    return service.delete(\'/${functionName}/deleteList\', { data: idList })\n}\n\n//详情\nexport const ${functionName}DetailApi = (id: number) => {\n    return service.get(\'/${functionName}/detail?id=\' + id)\n}\n\n//详情列表\nexport const ${functionName}DetailListApi = (idList: Array<number>) => {\n    return service.post(\'/${functionName}/detailList\', idList)\n}\n\n//简单分页\nexport const ${functionName}EntityPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityPage\', queryForm)\n}\n\n//简单列表\nexport const ${functionName}EntityListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityList\', queryForm)\n}\n\n//复杂分页\nexport const ${functionName}VOPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voPage\', queryForm)\n}\n\n//复杂列表\nexport const ${functionName}VOListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voList\', queryForm)\n}', 0, '2025-06-16 15:25:05', '2025-06-16 15:25:05', 0);
INSERT INTO `gen_template` VALUES (234, 34, 'vue/add-or-update.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/add-or-update.vue', '新增或者修改页面', '<template>\n	<el-dialog v-model=\"visible\" :title=\"!dataForm.id ? \'新增\' : \'修改\'\" :close-on-click-modal=\"false\">\n		<el-form ref=\"dataFormRef\" :model=\"dataForm\" :rules=\"dataRules\" label-width=\"100px\" @keyup.enter=\"submitHandle()\">\n	    <#list formList as field>\n            <el-form-item label=\"${field.fieldComment!}\" prop=\"${field.attrName}\">\n			<#if field.formType == \'text\'>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			<#elseif field.formType == \'textarea\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'editor\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"dataForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment!}\">\n                    <el-option v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"dataForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"dataForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.formType == \'date\'>\n                <el-date-picker type=\"date\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#elseif field.formType == \'datetime\'>\n                <el-date-picker type=\"datetime\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#else>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n            </el-form-item>\n	    </#list>\n		</el-form>\n		<template #footer>\n			<el-button @click=\"visible = false\">取消</el-button>\n			<el-button type=\"primary\" @click=\"submitHandle()\">确定</el-button>\n		</template>\n	</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, ref } from \'vue\'\nimport { ElMessage } from \'element-plus/es\'\nimport { ${functionName}DetailApi, ${functionName}SubmitApi } from \'@/api/${functionName}\'\n<#list formList as field>\n    <#if field.formType == \'select\' || field.formType == \'checkbox\' || field.formType == \'radio\'>\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n    </#if>\n</#list>\n\nconst emit = defineEmits([\'refreshDataList\'])\n\nconst visible = ref(false)\nconst dataFormRef = ref()\n\nconst dataForm = reactive({\n	<#list fieldList as field>\n	    <#if field.baseField == 0>\n	${field.attrName}: \'\'<#sep>,\n	    </#if>\n	</#list>\n})\n\nconst init = (id?: number) => {\n	visible.value = true\n	dataForm.id = null\n\n	// 重置表单数据\n	if (dataFormRef.value) {\n		dataFormRef.value.resetFields()\n	}\n\n	if (id) {\n		get${functionNamePascal}(id)\n	}\n}\n\nconst get${functionNamePascal} = (id: number) => {\n	${functionName}DetailApi(id).then(res => {\n		Object.assign(dataForm, res.data)\n	})\n}\n\nconst dataRules = ref({\n	<#list formList as field>\n	<#if field.formRequired == 1>\n	${field.attrName}: [{ required: true, message: \'必填项不能为空\', trigger: \'blur\' }]<#sep>,\n	</#if>\n	</#list>\n})\n\n// 表单提交\nconst submitHandle = () => {\n	dataFormRef.value.validate((valid: boolean) => {\n		if (!valid) {\n			return false\n		}\n\n		${functionName}SubmitApi(dataForm).then(() => {\n			ElMessage.success({\n				message: \'操作成功\',\n				duration: 500,\n				onClose: () => {\n					visible.value = false\n					emit(\'refreshDataList\')\n				}\n			})\n		})\n	})\n}\n\ndefineExpose({\n	init\n})\n</script>\n', 0, '2025-06-16 15:25:05', '2025-06-16 15:25:05', 0);
INSERT INTO `gen_template` VALUES (235, 34, 'vue/index.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/index.vue', '列表页面', '<template>\n	<el-card class=\"layout-query\">\n		<el-form ref=\"queryRef\" :inline=\"true\" :model=\"state.queryForm\" @keyup.enter=\"getDataList()\">\n		<#list queryList as field>\n			<el-form-item prop=\"${field.attrName}\">\n			<#if field.queryFormType == \'text\' || field.queryFormType == \'textarea\' || field.queryFormType == \'editor\'>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请输入${field.fieldComment}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment}\">\n                    <el-option v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.queryFormType == \'date\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"daterange\"\n                        format=\"YYYY-MM-DD\"\n                        value-format=\"YYYY-MM-DD\"\n                        clearable\n                >\n                </el-date-picker>\n            <#elseif field.queryFormType == \'datetime\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"datetimerange\"\n                        format=\"YYYY-MM-DD HH:mm:ss\"\n                        value-format=\"YYYY-MM-DD HH:mm:ss\"\n                        clearable\n                >\n                </el-date-picker>\n			<#else>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n			</el-form-item>\n        </#list>\n			<el-form-item>\n				<el-button type=\"primary\" @click=\"getDataList()\">查询</el-button>\n			</el-form-item>\n			<el-form-item>\n				<el-button @click=\"resetQueryRef()\">重置</el-button>\n			</el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"addOrUpdateHandle()\">新增</el-button>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"danger\" @click=\"deleteBatchHandle()\">删除</el-button>\n            </el-form-item>\n		</el-form>\n	</el-card>\n\n	<el-card>\n		<el-table v-loading=\"state.dataListLoading\" :data=\"state.dataList\" border class=\"layout-table\" @selection-change=\"selectionChangeHandle\">\n			<el-table-column type=\"selection\" header-align=\"center\" align=\"center\" width=\"50\"></el-table-column>\n			<el-table-column type=\"index\" label=\"序号\" header-align=\"center\" align=\"center\" width=\"60\"></el-table-column>\n	    <#list gridList as field>\n		  <#if field.formType == \'select\' || field.formType == \'radio\' || field.formType == \'checkbox\'>\n        	<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\" :formatter=\"(_: any, __: any, value: any) => getLabel(value, ${field.enumNameAllUpper}_ENUM)\"></el-table-column>\n		  <#else>\n			<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\"></el-table-column>\n		  </#if>\n        </#list>\n			<el-table-column label=\"操作\" fixed=\"right\" header-align=\"center\" align=\"center\" width=\"150\">\n				<template #default=\"scope\">\n					<el-button type=\"primary\" link @click=\"addOrUpdateHandle(scope.row.id)\">修改</el-button>\n					<el-button type=\"primary\" link @click=\"deleteBatchHandle(scope.row.id)\">删除</el-button>\n				</template>\n			</el-table-column>\n		</el-table>\n		<el-pagination\n			:current-page=\"state.pageNum\"\n			:page-sizes=\"state.pageSizes\"\n			:page-size=\"state.pageSize\"\n			:total=\"state.total\"\n			layout=\"total, sizes, prev, pager, next, jumper\"\n			@size-change=\"sizeChangeHandle\"\n			@current-change=\"currentChangeHandle\"\n		>\n		</el-pagination>\n\n		<!-- 弹窗, 新增 / 修改 -->\n		<add-or-update ref=\"addOrUpdateRef\" @refresh-data-list=\"getDataList\"></add-or-update>\n	</el-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { useCrud } from \'@/hooks\'\nimport { reactive, ref } from \'vue\'\nimport { IHooksOptions } from \'@/hooks/interface\'\nimport AddOrUpdate from \'./add-or-update.vue\'\n<#list gridList as field>\n	<#if field.formType == \'select\' || field.formType == \'radio\' || field.formType == \'checkbox\'>\nimport { getLabel } from \'@/utils/enum\'\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n	</#if>\n</#list>\n\nconst state: IHooksOptions = reactive({\n    dataListUrl: \'/${functionName}/entityPage\',\n    deleteUrl: \'/${functionName}/deleteList\',\n    queryForm: {\n        <#list queryList as field>\n        <#if field.formType == \'date\'>\n        startDate: \'\',\n        endDate: \'\'<#sep>, </#sep>\n        <#elseif field.formType == \'datetime\'>\n        startDateTime: \'\',\n        endDateTime: \'\'<#sep>, </#sep>\n        <#else>\n        ${field.attrName}: \'\'<#sep>, </#sep>\n        </#if>\n        </#list>\n    }\n})\n\nconst queryRef = ref()\nconst addOrUpdateRef = ref()\nconst addOrUpdateHandle = (id: number) => {\n	addOrUpdateRef.value.init(id)\n}\nconst resetQueryRef = () => {\n  queryRef.value.resetFields()\n}\n\nconst { getDataList, selectionChangeHandle, sizeChangeHandle, currentChangeHandle, deleteBatchHandle } = useCrud(state)\n</script>\n', 0, '2025-06-16 15:25:05', '2025-06-16 15:25:05', 0);
INSERT INTO `gen_template` VALUES (236, 35, 'vue/api.ts.ftl', '${frontendPath}/src/api/${functionName}.ts', '后端接口api', 'import service from \'@/utils/request\'\n\n//提交表单\nexport const ${functionName}SubmitApi = (dataForm: any) => {\n    if (dataForm.id) {\n        //修改接口\n        return service.put(\'/${functionName}/update\', dataForm)\n    } else {\n        //新增接口\n        return service.post(\'/${functionName}/add\', dataForm)\n    }\n}\n\n//删除接口\nexport const ${functionName}DeleteApi = (id: number) => {\n    return service.delete(\'/${functionName}/delete?id=\' + id)\n}\n\n//批量删除\nexport const ${functionName}DeleteListApi = (idList: Array<number>) => {\n    return service.delete(\'/${functionName}/deleteList\', { data: idList })\n}\n\n//详情\nexport const ${functionName}DetailApi = (id: number) => {\n    return service.get(\'/${functionName}/detail?id=\' + id)\n}\n\n//详情列表\nexport const ${functionName}DetailListApi = (idList: Array<number>) => {\n    return service.post(\'/${functionName}/detailList\', idList)\n}\n\n//简单分页\nexport const ${functionName}EntityPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityPage\', queryForm)\n}\n\n//简单列表\nexport const ${functionName}EntityListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/entityList\', queryForm)\n}\n\n//复杂分页\nexport const ${functionName}VOPageApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voPage\', queryForm)\n}\n\n//复杂列表\nexport const ${functionName}VOListApi = (queryForm: any) => {\n    return service.post(\'/${functionName}/voList\', queryForm)\n}', 0, '2025-06-16 15:25:54', '2025-06-16 15:25:54', 0);
INSERT INTO `gen_template` VALUES (237, 35, 'vue/add-or-update.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/add-or-update.vue', '新增或者修改页面', '<template>\n	<el-dialog v-model=\"visible\" :title=\"!dataForm.id ? \'新增\' : \'修改\'\" :close-on-click-modal=\"false\">\n		<el-form ref=\"dataFormRef\" :model=\"dataForm\" :rules=\"dataRules\" label-width=\"100px\" @keyup.enter=\"submitHandle()\">\n	    <#list formList as field>\n            <el-form-item label=\"${field.fieldComment!}\" prop=\"${field.attrName}\">\n			<#if field.formType == \'text\'>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			<#elseif field.formType == \'textarea\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'editor\'>\n                <el-input type=\"textarea\" v-model=\"dataForm.${field.attrName}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"dataForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment!}\">\n                    <el-option v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"dataForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"dataForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${field.enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.formType == \'date\'>\n                <el-date-picker type=\"date\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#elseif field.formType == \'datetime\'>\n                <el-date-picker type=\"datetime\" placeholder=\"请选择${field.fieldComment!}\" v-model=\"dataForm.${field.attrName}\"></el-date-picker>\n			<#else>\n                <el-input v-model=\"dataForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n            </el-form-item>\n	    </#list>\n		</el-form>\n		<template #footer>\n			<el-button @click=\"visible = false\">取消</el-button>\n			<el-button type=\"primary\" @click=\"submitHandle()\">确定</el-button>\n		</template>\n	</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, ref } from \'vue\'\nimport { ElMessage } from \'element-plus/es\'\nimport { ${functionName}DetailApi, ${functionName}SubmitApi } from \'@/api/${functionName}\'\n<#list formList as field>\n    <#if field.formType == \'select\' || field.formType == \'checkbox\' || field.formType == \'radio\'>\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n    </#if>\n</#list>\n\nconst emit = defineEmits([\'refreshDataList\'])\n\nconst visible = ref(false)\nconst dataFormRef = ref()\n\nconst dataForm = reactive({\n	<#list fieldList as field>\n	    <#if field.baseField == 0>\n	${field.attrName}: \'\'<#sep>,\n	    </#if>\n	</#list>\n})\n\nconst init = (id?: number) => {\n	visible.value = true\n	dataForm.id = null\n\n	// 重置表单数据\n	if (dataFormRef.value) {\n		dataFormRef.value.resetFields()\n	}\n\n	if (id) {\n		get${functionNamePascal}(id)\n	}\n}\n\nconst get${functionNamePascal} = (id: number) => {\n	${functionName}DetailApi(id).then(res => {\n		Object.assign(dataForm, res.data)\n	})\n}\n\nconst dataRules = ref({\n	<#list formList as field>\n	<#if field.formRequired == 1>\n	${field.attrName}: [{ required: true, message: \'必填项不能为空\', trigger: \'blur\' }]<#sep>,\n	</#if>\n	</#list>\n})\n\n// 表单提交\nconst submitHandle = () => {\n	dataFormRef.value.validate((valid: boolean) => {\n		if (!valid) {\n			return false\n		}\n\n		${functionName}SubmitApi(dataForm).then(() => {\n			ElMessage.success({\n				message: \'操作成功\',\n				duration: 500,\n				onClose: () => {\n					visible.value = false\n					emit(\'refreshDataList\')\n				}\n			})\n		})\n	})\n}\n\ndefineExpose({\n	init\n})\n</script>\n', 0, '2025-06-16 15:25:54', '2025-06-16 15:25:54', 0);
INSERT INTO `gen_template` VALUES (238, 35, 'vue/index.vue.ftl', '${frontendPath}/src/views/${functionNameKebabCase}/index.vue', '列表页面', '<template>\n	<el-card class=\"layout-query\">\n		<el-form ref=\"queryRef\" :inline=\"true\" :model=\"state.queryForm\" @keyup.enter=\"getDataList()\">\n		<#list queryList as field>\n			<el-form-item prop=\"${field.attrName}\">\n			<#if field.queryFormType == \'text\' || field.queryFormType == \'textarea\' || field.queryFormType == \'editor\'>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请输入${field.fieldComment}\"></el-input>\n			<#elseif field.formType == \'select\'>\n                <el-select v-model=\"state.queryForm.${field.attrName}\" clearable placeholder=\"请选择${field.fieldComment}\">\n                    <el-option v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                </el-select>\n			<#elseif field.formType == \'radio\'>\n                <el-radio-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-radio v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.value\">{{ item.label }}</el-radio>\n                </el-radio-group>\n			<#elseif field.formType == \'checkbox\'>\n                <el-checkbox-group v-model=\"state.queryForm.${field.attrName}\">\n                    <el-checkbox v-for=\"item in ${enumNameAllUpper}_ENUM\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">{{ item.label }}</el-checkbox>\n                </el-checkbox-group>\n			<#elseif field.queryFormType == \'date\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"daterange\"\n                        format=\"YYYY-MM-DD\"\n                        value-format=\"YYYY-MM-DD\"\n                        clearable\n                >\n                </el-date-picker>\n            <#elseif field.queryFormType == \'datetime\'>\n                <el-date-picker\n                        v-model=\"state.queryForm.${field.attrName}\"\n                        type=\"datetimerange\"\n                        format=\"YYYY-MM-DD HH:mm:ss\"\n                        value-format=\"YYYY-MM-DD HH:mm:ss\"\n                        clearable\n                >\n                </el-date-picker>\n			<#else>\n                <el-input v-model=\"state.queryForm.${field.attrName}\" placeholder=\"请输入${field.fieldComment!}\"></el-input>\n			</#if>\n			</el-form-item>\n        </#list>\n			<el-form-item>\n				<el-button type=\"primary\" @click=\"getDataList()\">查询</el-button>\n			</el-form-item>\n			<el-form-item>\n				<el-button @click=\"resetQueryRef()\">重置</el-button>\n			</el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"addOrUpdateHandle()\">新增</el-button>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"danger\" @click=\"deleteBatchHandle()\">删除</el-button>\n            </el-form-item>\n		</el-form>\n	</el-card>\n\n	<el-card>\n		<el-table v-loading=\"state.dataListLoading\" :data=\"state.dataList\" border class=\"layout-table\" @selection-change=\"selectionChangeHandle\">\n			<el-table-column type=\"selection\" header-align=\"center\" align=\"center\" width=\"50\"></el-table-column>\n			<el-table-column type=\"index\" label=\"序号\" header-align=\"center\" align=\"center\" width=\"60\"></el-table-column>\n	    <#list gridList as field>\n		  <#if field.formType == \'select\' || field.formType == \'radio\' || field.formType == \'checkbox\'>\n        	<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\" :formatter=\"(_: any, __: any, value: any) => getLabel(value, ${field.enumNameAllUpper}_ENUM)\"></el-table-column>\n		  <#else>\n			<el-table-column prop=\"${field.attrName}\" label=\"${field.fieldComment!}\" show-overflow-tooltip header-align=\"center\" align=\"center\"></el-table-column>\n		  </#if>\n        </#list>\n			<el-table-column label=\"操作\" fixed=\"right\" header-align=\"center\" align=\"center\" width=\"150\">\n				<template #default=\"scope\">\n					<el-button type=\"primary\" link @click=\"addOrUpdateHandle(scope.row.id)\">修改</el-button>\n					<el-button type=\"primary\" link @click=\"deleteBatchHandle(scope.row.id)\">删除</el-button>\n				</template>\n			</el-table-column>\n		</el-table>\n		<el-pagination\n			:current-page=\"state.pageNum\"\n			:page-sizes=\"state.pageSizes\"\n			:page-size=\"state.pageSize\"\n			:total=\"state.total\"\n			layout=\"total, sizes, prev, pager, next, jumper\"\n			@size-change=\"sizeChangeHandle\"\n			@current-change=\"currentChangeHandle\"\n		>\n		</el-pagination>\n\n		<!-- 弹窗, 新增 / 修改 -->\n		<add-or-update ref=\"addOrUpdateRef\" @refresh-data-list=\"getDataList\"></add-or-update>\n	</el-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { useCrud } from \'@/hooks\'\nimport { reactive, ref } from \'vue\'\nimport { IHooksOptions } from \'@/hooks/interface\'\nimport AddOrUpdate from \'./add-or-update.vue\'\n<#list gridList as field>\n	<#if field.formType == \'select\' || field.formType == \'radio\' || field.formType == \'checkbox\'>\nimport { getLabel } from \'@/utils/enum\'\nimport { ${field.enumNameAllUpper}_ENUM } from \'@/enums/${field.enumName}-enum\'\n	</#if>\n</#list>\n\nconst state: IHooksOptions = reactive({\n    dataListUrl: \'/${functionName}/entityPage\',\n    deleteUrl: \'/${functionName}/deleteList\',\n    queryForm: {\n        <#list queryList as field>\n        <#if field.formType == \'date\'>\n        startDate: \'\',\n        endDate: \'\'<#sep>, </#sep>\n        <#elseif field.formType == \'datetime\'>\n        startDateTime: \'\',\n        endDateTime: \'\'<#sep>, </#sep>\n        <#else>\n        ${field.attrName}: \'\'<#sep>, </#sep>\n        </#if>\n        </#list>\n    }\n})\n\nconst queryRef = ref()\nconst addOrUpdateRef = ref()\nconst addOrUpdateHandle = (id: number) => {\n	addOrUpdateRef.value.init(id)\n}\nconst resetQueryRef = () => {\n  queryRef.value.resetFields()\n}\n\nconst { getDataList, selectionChangeHandle, sizeChangeHandle, currentChangeHandle, deleteBatchHandle } = useCrud(state)\n</script>\n', 0, '2025-06-16 15:25:54', '2025-06-16 15:25:54', 0);
INSERT INTO `gen_template` VALUES (249, 32, '1', '11', '11222', '11222', 0, '2025-07-04 14:00:11', '2025-07-04 14:00:29', 1);
INSERT INTO `gen_template` VALUES (250, 32, '11', '11', '11', '111', 0, '2025-07-04 14:02:30', '2025-07-04 16:18:43', 0);
INSERT INTO `gen_template` VALUES (251, 32, '222', '22', '22', '222', 0, '2025-07-04 16:18:51', '2025-07-04 16:18:51', 0);
INSERT INTO `gen_template` VALUES (252, 45, 'enum.ftl', '${frontendPath}/src/enums/${enumName}-enum.ts.ftl', '枚举目录', 'import { EnumItem } from \'@/utils/enum\'\n\n//${enumDesc}枚举\nconst ${enumNameAllUpper}_ENUM: EnumItem[] = [\n<#list enumItemList as item >\n    {  label: \'${item.enumItemDesc}\', value: \'${item.enumItemCode}\' }<#if item_has_next>,</#if>\n</#list>\n]\n', 0, '2025-07-04 17:17:33', '2025-07-04 17:18:20', 1);
INSERT INTO `gen_template` VALUES (253, 45, '11', '11', '11', '111', 0, '2025-07-04 17:17:33', '2025-07-04 17:18:20', 1);
INSERT INTO `gen_template` VALUES (254, 45, '222', '22', '22', '222', 0, '2025-07-04 17:17:33', '2025-07-04 17:18:20', 1);

-- ----------------------------
-- Table structure for gen_template_group
-- ----------------------------
DROP TABLE IF EXISTS `gen_template_group`;
CREATE TABLE `gen_template_group`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '模板组名称',
  `type` tinyint NULL DEFAULT 0 COMMENT '模板组类型（0-项目，1-表，2-枚举）',
  `group_desc` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '模板组描述',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `is_delete` tinyint NULL DEFAULT 0 COMMENT '是否删除（0-未删除，1-删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 46 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '模板组' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_template_group
-- ----------------------------
INSERT INTO `gen_template_group` VALUES (1, 'jdk17表模板', 1, 'controller、service、mapper等带代码', '2025-04-25 10:50:52', '2025-06-03 11:04:05', 0);
INSERT INTO `gen_template_group` VALUES (28, '前端表模板', 1, 'vue3模板', '2025-05-14 17:55:56', '2025-05-19 10:29:34', 0);
INSERT INTO `gen_template_group` VALUES (29, '单体java项目模板', 0, '包含启动类、pom文件和配置文件', '2025-05-14 17:56:37', '2025-06-09 16:32:24', 0);
INSERT INTO `gen_template_group` VALUES (30, '前端项目模板', 0, 'vue3+vite模板', '2025-05-15 14:12:58', '2025-05-19 10:29:41', 0);
INSERT INTO `gen_template_group` VALUES (31, 'java枚举模板', 2, 'java枚举模板组', '2025-05-19 14:07:12', '2025-05-19 14:07:43', 0);
INSERT INTO `gen_template_group` VALUES (32, '前端枚举模板', 2, '前端枚举模板', '2025-05-20 10:22:59', '2025-06-17 13:37:31', 0);
INSERT INTO `gen_template_group` VALUES (44, '1', 0, '1', '2025-07-04 13:53:49', '2025-07-04 13:54:03', 1);
INSERT INTO `gen_template_group` VALUES (45, '前端枚举模板2', 2, '前端枚举模板', '2025-07-04 17:17:33', '2025-07-04 17:18:20', 1);

SET FOREIGN_KEY_CHECKS = 1;
